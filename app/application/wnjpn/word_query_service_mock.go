// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/application/wnjpn/word_query_service.go
//
// Generated by this command:
//
//	mockgen -source=./app/application/wnjpn/word_query_service.go -destination=./app/application/wnjpn/word_query_service_mock.go -package=wnjpn
//

// Package wnjpn is a generated GoMock package.
package wnjpn

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockWordQueryService is a mock of WordQueryService interface.
type MockWordQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockWordQueryServiceMockRecorder
	isgomock struct{}
}

// MockWordQueryServiceMockRecorder is the mock recorder for MockWordQueryService.
type MockWordQueryServiceMockRecorder struct {
	mock *MockWordQueryService
}

// NewMockWordQueryService creates a new mock instance.
func NewMockWordQueryService(ctrl *gomock.Controller) *MockWordQueryService {
	mock := &MockWordQueryService{ctrl: ctrl}
	mock.recorder = &MockWordQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWordQueryService) EXPECT() *MockWordQueryServiceMockRecorder {
	return m.recorder
}

// FindByLangIsAndPosIn mocks base method.
func (m *MockWordQueryService) FindByLangIsAndPosIn(ctx context.Context, lang string, pos []string) ([]*FetchWordsDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLangIsAndPosIn", ctx, lang, pos)
	ret0, _ := ret[0].([]*FetchWordsDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLangIsAndPosIn indicates an expected call of FindByLangIsAndPosIn.
func (mr *MockWordQueryServiceMockRecorder) FindByLangIsAndPosIn(ctx, lang, pos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLangIsAndPosIn", reflect.TypeOf((*MockWordQueryService)(nil).FindByLangIsAndPosIn), ctx, lang, pos)
}
