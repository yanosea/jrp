// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/domain/jrp/history/history_repository.go
//
// Generated by this command:
//
//	mockgen -source=./app/domain/jrp/history/history_repository.go -destination=./app/domain/jrp/history/history_repository_mock.go -package=history
//

// Package history is a generated GoMock package.
package history

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHistoryRepository is a mock of HistoryRepository interface.
type MockHistoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHistoryRepositoryMockRecorder
}

// MockHistoryRepositoryMockRecorder is the mock recorder for MockHistoryRepository.
type MockHistoryRepositoryMockRecorder struct {
	mock *MockHistoryRepository
}

// NewMockHistoryRepository creates a new mock instance.
func NewMockHistoryRepository(ctrl *gomock.Controller) *MockHistoryRepository {
	mock := &MockHistoryRepository{ctrl: ctrl}
	mock.recorder = &MockHistoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistoryRepository) EXPECT() *MockHistoryRepositoryMockRecorder {
	return m.recorder
}

// DeleteAll mocks base method.
func (m *MockHistoryRepository) DeleteAll(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockHistoryRepositoryMockRecorder) DeleteAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockHistoryRepository)(nil).DeleteAll), ctx)
}

// DeleteByIdIn mocks base method.
func (m *MockHistoryRepository) DeleteByIdIn(ctx context.Context, ids []int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIdIn", ctx, ids)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByIdIn indicates an expected call of DeleteByIdIn.
func (mr *MockHistoryRepositoryMockRecorder) DeleteByIdIn(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIdIn", reflect.TypeOf((*MockHistoryRepository)(nil).DeleteByIdIn), ctx, ids)
}

// DeleteByIdInAndIsFavoritedIs mocks base method.
func (m *MockHistoryRepository) DeleteByIdInAndIsFavoritedIs(ctx context.Context, ids []int, isFavorited int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIdInAndIsFavoritedIs", ctx, ids, isFavorited)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByIdInAndIsFavoritedIs indicates an expected call of DeleteByIdInAndIsFavoritedIs.
func (mr *MockHistoryRepositoryMockRecorder) DeleteByIdInAndIsFavoritedIs(ctx, ids, isFavorited any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIdInAndIsFavoritedIs", reflect.TypeOf((*MockHistoryRepository)(nil).DeleteByIdInAndIsFavoritedIs), ctx, ids, isFavorited)
}

// DeleteByIsFavoritedIs mocks base method.
func (m *MockHistoryRepository) DeleteByIsFavoritedIs(ctx context.Context, isFavorited int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByIsFavoritedIs", ctx, isFavorited)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByIsFavoritedIs indicates an expected call of DeleteByIsFavoritedIs.
func (mr *MockHistoryRepositoryMockRecorder) DeleteByIsFavoritedIs(ctx, isFavorited any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByIsFavoritedIs", reflect.TypeOf((*MockHistoryRepository)(nil).DeleteByIsFavoritedIs), ctx, isFavorited)
}

// FindAll mocks base method.
func (m *MockHistoryRepository) FindAll(ctx context.Context) ([]*History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockHistoryRepositoryMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockHistoryRepository)(nil).FindAll), ctx)
}

// FindByIsFavoritedIs mocks base method.
func (m *MockHistoryRepository) FindByIsFavoritedIs(ctx context.Context, isFavorited int) ([]*History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIsFavoritedIs", ctx, isFavorited)
	ret0, _ := ret[0].([]*History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIsFavoritedIs indicates an expected call of FindByIsFavoritedIs.
func (mr *MockHistoryRepositoryMockRecorder) FindByIsFavoritedIs(ctx, isFavorited any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIsFavoritedIs", reflect.TypeOf((*MockHistoryRepository)(nil).FindByIsFavoritedIs), ctx, isFavorited)
}

// FindByIsFavoritedIsAndPhraseContains mocks base method.
func (m *MockHistoryRepository) FindByIsFavoritedIsAndPhraseContains(ctx context.Context, keywords []string, and bool, isFavorited int) ([]*History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIsFavoritedIsAndPhraseContains", ctx, keywords, and, isFavorited)
	ret0, _ := ret[0].([]*History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIsFavoritedIsAndPhraseContains indicates an expected call of FindByIsFavoritedIsAndPhraseContains.
func (mr *MockHistoryRepositoryMockRecorder) FindByIsFavoritedIsAndPhraseContains(ctx, keywords, and, isFavorited any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIsFavoritedIsAndPhraseContains", reflect.TypeOf((*MockHistoryRepository)(nil).FindByIsFavoritedIsAndPhraseContains), ctx, keywords, and, isFavorited)
}

// FindByPhraseContains mocks base method.
func (m *MockHistoryRepository) FindByPhraseContains(ctx context.Context, keywords []string, and bool) ([]*History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhraseContains", ctx, keywords, and)
	ret0, _ := ret[0].([]*History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhraseContains indicates an expected call of FindByPhraseContains.
func (mr *MockHistoryRepositoryMockRecorder) FindByPhraseContains(ctx, keywords, and any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhraseContains", reflect.TypeOf((*MockHistoryRepository)(nil).FindByPhraseContains), ctx, keywords, and)
}

// FindTopNByIsFavoritedIsAndByOrderByIdAsc mocks base method.
func (m *MockHistoryRepository) FindTopNByIsFavoritedIsAndByOrderByIdAsc(ctx context.Context, number, isFavorited int) ([]*History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopNByIsFavoritedIsAndByOrderByIdAsc", ctx, number, isFavorited)
	ret0, _ := ret[0].([]*History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopNByIsFavoritedIsAndByOrderByIdAsc indicates an expected call of FindTopNByIsFavoritedIsAndByOrderByIdAsc.
func (mr *MockHistoryRepositoryMockRecorder) FindTopNByIsFavoritedIsAndByOrderByIdAsc(ctx, number, isFavorited any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopNByIsFavoritedIsAndByOrderByIdAsc", reflect.TypeOf((*MockHistoryRepository)(nil).FindTopNByIsFavoritedIsAndByOrderByIdAsc), ctx, number, isFavorited)
}

// FindTopNByIsFavoritedIsAndByPhraseContainsOrderByIdAsc mocks base method.
func (m *MockHistoryRepository) FindTopNByIsFavoritedIsAndByPhraseContainsOrderByIdAsc(ctx context.Context, keywords []string, and bool, number, isFavorited int) ([]*History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopNByIsFavoritedIsAndByPhraseContainsOrderByIdAsc", ctx, keywords, and, number, isFavorited)
	ret0, _ := ret[0].([]*History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopNByIsFavoritedIsAndByPhraseContainsOrderByIdAsc indicates an expected call of FindTopNByIsFavoritedIsAndByPhraseContainsOrderByIdAsc.
func (mr *MockHistoryRepositoryMockRecorder) FindTopNByIsFavoritedIsAndByPhraseContainsOrderByIdAsc(ctx, keywords, and, number, isFavorited any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopNByIsFavoritedIsAndByPhraseContainsOrderByIdAsc", reflect.TypeOf((*MockHistoryRepository)(nil).FindTopNByIsFavoritedIsAndByPhraseContainsOrderByIdAsc), ctx, keywords, and, number, isFavorited)
}

// FindTopNByOrderByIdAsc mocks base method.
func (m *MockHistoryRepository) FindTopNByOrderByIdAsc(ctx context.Context, number int) ([]*History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopNByOrderByIdAsc", ctx, number)
	ret0, _ := ret[0].([]*History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopNByOrderByIdAsc indicates an expected call of FindTopNByOrderByIdAsc.
func (mr *MockHistoryRepositoryMockRecorder) FindTopNByOrderByIdAsc(ctx, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopNByOrderByIdAsc", reflect.TypeOf((*MockHistoryRepository)(nil).FindTopNByOrderByIdAsc), ctx, number)
}

// FindTopNByPhraseContainsOrderByIdAsc mocks base method.
func (m *MockHistoryRepository) FindTopNByPhraseContainsOrderByIdAsc(ctx context.Context, keywords []string, and bool, number int) ([]*History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopNByPhraseContainsOrderByIdAsc", ctx, keywords, and, number)
	ret0, _ := ret[0].([]*History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopNByPhraseContainsOrderByIdAsc indicates an expected call of FindTopNByPhraseContainsOrderByIdAsc.
func (mr *MockHistoryRepositoryMockRecorder) FindTopNByPhraseContainsOrderByIdAsc(ctx, keywords, and, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopNByPhraseContainsOrderByIdAsc", reflect.TypeOf((*MockHistoryRepository)(nil).FindTopNByPhraseContainsOrderByIdAsc), ctx, keywords, and, number)
}

// SaveAll mocks base method.
func (m *MockHistoryRepository) SaveAll(ctx context.Context, jrps []*History) ([]*History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAll", ctx, jrps)
	ret0, _ := ret[0].([]*History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAll indicates an expected call of SaveAll.
func (mr *MockHistoryRepositoryMockRecorder) SaveAll(ctx, jrps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAll", reflect.TypeOf((*MockHistoryRepository)(nil).SaveAll), ctx, jrps)
}

// UpdateIsFavoritedByIdIn mocks base method.
func (m *MockHistoryRepository) UpdateIsFavoritedByIdIn(ctx context.Context, isFavorited int, ids []int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsFavoritedByIdIn", ctx, isFavorited, ids)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIsFavoritedByIdIn indicates an expected call of UpdateIsFavoritedByIdIn.
func (mr *MockHistoryRepositoryMockRecorder) UpdateIsFavoritedByIdIn(ctx, isFavorited, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsFavoritedByIdIn", reflect.TypeOf((*MockHistoryRepository)(nil).UpdateIsFavoritedByIdIn), ctx, isFavorited, ids)
}

// UpdateIsFavoritedByIsFavoritedIs mocks base method.
func (m *MockHistoryRepository) UpdateIsFavoritedByIsFavoritedIs(ctx context.Context, isFavorited, isFavoritedIs int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsFavoritedByIsFavoritedIs", ctx, isFavorited, isFavoritedIs)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIsFavoritedByIsFavoritedIs indicates an expected call of UpdateIsFavoritedByIsFavoritedIs.
func (mr *MockHistoryRepositoryMockRecorder) UpdateIsFavoritedByIsFavoritedIs(ctx, isFavorited, isFavoritedIs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsFavoritedByIsFavoritedIs", reflect.TypeOf((*MockHistoryRepository)(nil).UpdateIsFavoritedByIsFavoritedIs), ctx, isFavorited, isFavoritedIs)
}
