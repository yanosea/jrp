// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/presentation/cli/jrp/command/command.go
//
// Generated by this command:
//
//	mockgen -source=./app/presentation/cli/jrp/command/command.go -destination=./app/presentation/cli/jrp/command/command_mock.go -package=command
//

// Package command is a generated GoMock package.
package command

import (
	context "context"
	reflect "reflect"

	proxy "github.com/yanosea/jrp/v2/pkg/proxy"
	utility "github.com/yanosea/jrp/v2/pkg/utility"
	gomock "go.uber.org/mock/gomock"
)

// MockCli is a mock of Cli interface.
type MockCli struct {
	ctrl     *gomock.Controller
	recorder *MockCliMockRecorder
}

// MockCliMockRecorder is the mock recorder for MockCli.
type MockCliMockRecorder struct {
	mock *MockCli
}

// NewMockCli creates a new mock instance.
func NewMockCli(ctrl *gomock.Controller) *MockCli {
	mock := &MockCli{ctrl: ctrl}
	mock.recorder = &MockCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCli) EXPECT() *MockCliMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockCli) Init(envconfig proxy.Envconfig, sql proxy.Sql, version string, fileUtil utility.FileUtil, versionUtil utility.VersionUtil) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", envconfig, sql, version, fileUtil, versionUtil)
	ret0, _ := ret[0].(int)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockCliMockRecorder) Init(envconfig, sql, version, fileUtil, versionUtil any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockCli)(nil).Init), envconfig, sql, version, fileUtil, versionUtil)
}

// Run mocks base method.
func (m *MockCli) Run(ctx context.Context) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(int)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCliMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCli)(nil).Run), ctx)
}
