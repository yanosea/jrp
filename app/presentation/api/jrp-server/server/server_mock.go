// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/presentation/api/jrp-server/server/server.go
//
// Generated by this command:
//
//	mockgen -source=./app/presentation/api/jrp-server/server/server.go -destination=./app/presentation/api/jrp-server/server/server_mock.go -package=server
//

// Package server is a generated GoMock package.
package server

import (
	reflect "reflect"

	proxy "github.com/yanosea/jrp/v2/pkg/proxy"
	utility "github.com/yanosea/jrp/v2/pkg/utility"
	gomock "go.uber.org/mock/gomock"
)

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
	isgomock struct{}
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockServer) Init(envconfig proxy.Envconfig, fileUtil utility.FileUtil, sql proxy.Sql) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", envconfig, fileUtil, sql)
	ret0, _ := ret[0].(int)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockServerMockRecorder) Init(envconfig, fileUtil, sql any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockServer)(nil).Init), envconfig, fileUtil, sql)
}

// Run mocks base method.
func (m *MockServer) Run() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(int)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockServerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockServer)(nil).Run))
}
