// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/infrastructure/database/connection_manager.go
//
// Generated by this command:
//
//	mockgen -source=./app/infrastructure/database/connection_manager.go -destination=./app/infrastructure/database/connection_manager_mock.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConnectionManager is a mock of ConnectionManager interface.
type MockConnectionManager struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionManagerMockRecorder
	isgomock struct{}
}

// MockConnectionManagerMockRecorder is the mock recorder for MockConnectionManager.
type MockConnectionManagerMockRecorder struct {
	mock *MockConnectionManager
}

// NewMockConnectionManager creates a new mock instance.
func NewMockConnectionManager(ctrl *gomock.Controller) *MockConnectionManager {
	mock := &MockConnectionManager{ctrl: ctrl}
	mock.recorder = &MockConnectionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionManager) EXPECT() *MockConnectionManagerMockRecorder {
	return m.recorder
}

// CloseAllConnections mocks base method.
func (m *MockConnectionManager) CloseAllConnections() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAllConnections")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAllConnections indicates an expected call of CloseAllConnections.
func (mr *MockConnectionManagerMockRecorder) CloseAllConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAllConnections", reflect.TypeOf((*MockConnectionManager)(nil).CloseAllConnections))
}

// CloseConnection mocks base method.
func (m *MockConnectionManager) CloseConnection(which DBName) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseConnection", which)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockConnectionManagerMockRecorder) CloseConnection(which any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockConnectionManager)(nil).CloseConnection), which)
}

// GetConnection mocks base method.
func (m *MockConnectionManager) GetConnection(which DBName) (DBConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", which)
	ret0, _ := ret[0].(DBConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockConnectionManagerMockRecorder) GetConnection(which any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockConnectionManager)(nil).GetConnection), which)
}

// InitializeConnection mocks base method.
func (m *MockConnectionManager) InitializeConnection(config ConnectionConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeConnection", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeConnection indicates an expected call of InitializeConnection.
func (mr *MockConnectionManagerMockRecorder) InitializeConnection(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeConnection", reflect.TypeOf((*MockConnectionManager)(nil).InitializeConnection), config)
}
