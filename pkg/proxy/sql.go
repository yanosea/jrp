package proxy

import (
	"context"
	"database/sql"

	_ "modernc.org/sqlite"
)

// Sql is an interface that provides a proxy of the methods of sql.
type Sql interface {
	Open(driverName, dataSourceName string) (DB, error)
}

// sqlProxy is a proxy struct that implements the Sql interface.
type sqlProxy struct{}

// NewSql returns a new instance of the Sql interface.
func NewSql() Sql {
	return &sqlProxy{}
}

// Open opens a database specified by its database driver name and a driver-specific data source name.
func (sqlProxy) Open(driverName, dataSourceName string) (DB, error) {
	db, err := sql.Open(driverName, dataSourceName)
	return &dbProxy{db: db}, err
}

// DB is an interface that provides a proxy of the methods of sql.DB.
type DB interface {
	BeginTx(ctx context.Context, opts *sql.TxOptions) (Tx, error)
	Close() error
	ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)
	PrepareContext(ctx context.Context, query string) (Stmt, error)
	QueryContext(ctx context.Context, query string, args ...interface{}) (Rows, error)
}

// dbProxy is a proxy struct that implements the DB interface.
type dbProxy struct {
	db *sql.DB
}

// BeginTx starts a new transaction.
func (d *dbProxy) BeginTx(ctx context.Context, opts *sql.TxOptions) (Tx, error) {
	tx, err := d.db.BeginTx(ctx, opts)
	return &txProxy{tx: tx}, err
}

// Close closes the database and prevents new queries from starting.
func (d *dbProxy) Close() error {
	return d.db.Close()
}

// ExecContext executes a query without returning any rows.
func (d *dbProxy) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error) {
	result, err := d.db.ExecContext(ctx, query, args...)
	return &resultProxy{result: result}, err
}

// PrepareContext creates a prepared statement for later queries or executions.
func (d *dbProxy) PrepareContext(ctx context.Context, query string) (Stmt, error) {
	stmt, err := d.db.PrepareContext(ctx, query)
	return &stmtProxy{stmt: stmt}, err
}

// QueryContext executes a query that returns rows, typically a SELECT.
func (d *dbProxy) QueryContext(ctx context.Context, query string, args ...interface{}) (Rows, error) {
	rows, err := d.db.QueryContext(ctx, query, args...)
	return &rowsProxy{rows: rows}, err
}

// Rows is an interface that provides a proxy of the methods of sql.Rows.
type Rows interface {
	Close() error
	Next() bool
	Scan(dest ...interface{}) error
}

// rowsProxy is a proxy struct that implements the Rows interface.
type rowsProxy struct {
	rows *sql.Rows
}

// Close closes the Rows, preventing further enumeration.
func (r *rowsProxy) Close() error {
	return r.rows.Close()
}

// Next prepares the next result row for reading with the Scan method.
func (r *rowsProxy) Next() bool {
	return r.rows.Next()
}

// Scan copies the columns in the current row into the values pointed at by dest.
func (r *rowsProxy) Scan(dest ...interface{}) error {
	return r.rows.Scan(dest...)
}

// Result is an interface that provides a proxy of the methods of sql.Result.
type Result interface {
	LastInsertId() (int64, error)
	RowsAffected() (int64, error)
}

// resultProxy is a proxy struct that implements the Result interface.
type resultProxy struct {
	result sql.Result
}

// LastInsertId returns the integer generated by the database in response to a command.
func (r *resultProxy) LastInsertId() (int64, error) {
	return r.result.LastInsertId()
}

// RowsAffected returns the number of rows affected by an update, insert, or delete.
func (r *resultProxy) RowsAffected() (int64, error) {
	return r.result.RowsAffected()
}

// Tx is an interface that provides a proxy of the methods of sql.Tx.
type Tx interface {
	Commit() error
	ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error)
	Rollback() error
}

// txProxy is a proxy struct that implements the Tx interface.
type txProxy struct {
	tx *sql.Tx
}

// Commit commits the transaction.
func (t *txProxy) Commit() error {
	return t.tx.Commit()
}

// ExecContext executes a query that affects rows, such as an INSERT, UPDATE, or DELETE.
func (t *txProxy) ExecContext(ctx context.Context, query string, args ...interface{}) (Result, error) {
	result, err := t.tx.ExecContext(ctx, query, args...)
	return &resultProxy{result: result}, err
}

// Rollback aborts the transaction.
func (t *txProxy) Rollback() error {
	return t.tx.Rollback()
}

// Stmt is an interface that provides a proxy of the methods of sql.Stmt.
type Stmt interface {
	ExecContext(ctx context.Context, args ...interface{}) (Result, error)
	Close() error
}

// stmtProxy is a proxy struct that implements the Stmt interface.
type stmtProxy struct {
	stmt *sql.Stmt
}

// Close closes the statement.
func (s *stmtProxy) Close() error {
	return s.stmt.Close()
}

// ExecContext executes a query that affects rows, such as an INSERT, UPDATE, or DELETE.
func (s *stmtProxy) ExecContext(ctx context.Context, args ...interface{}) (Result, error) {
	result, err := s.stmt.ExecContext(ctx, args...)
	return &resultProxy{result: result}, err
}
