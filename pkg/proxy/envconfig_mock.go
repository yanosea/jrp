// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/envconfig.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/envconfig.go -destination=./pkg/proxy/envconfig_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEnvconfig is a mock of Envconfig interface.
type MockEnvconfig struct {
	ctrl     *gomock.Controller
	recorder *MockEnvconfigMockRecorder
	isgomock struct{}
}

// MockEnvconfigMockRecorder is the mock recorder for MockEnvconfig.
type MockEnvconfigMockRecorder struct {
	mock *MockEnvconfig
}

// NewMockEnvconfig creates a new mock instance.
func NewMockEnvconfig(ctrl *gomock.Controller) *MockEnvconfig {
	mock := &MockEnvconfig{ctrl: ctrl}
	mock.recorder = &MockEnvconfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvconfig) EXPECT() *MockEnvconfigMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockEnvconfig) Process(prefix string, spec any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", prefix, spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockEnvconfigMockRecorder) Process(prefix, spec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockEnvconfig)(nil).Process), prefix, spec)
}
