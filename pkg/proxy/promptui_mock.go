// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/promptui.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/promptui.go -destination=./pkg/proxy/promptui_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPromptui is a mock of Promptui interface.
type MockPromptui struct {
	ctrl     *gomock.Controller
	recorder *MockPromptuiMockRecorder
}

// MockPromptuiMockRecorder is the mock recorder for MockPromptui.
type MockPromptuiMockRecorder struct {
	mock *MockPromptui
}

// NewMockPromptui creates a new mock instance.
func NewMockPromptui(ctrl *gomock.Controller) *MockPromptui {
	mock := &MockPromptui{ctrl: ctrl}
	mock.recorder = &MockPromptuiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromptui) EXPECT() *MockPromptuiMockRecorder {
	return m.recorder
}

// NewPrompt mocks base method.
func (m *MockPromptui) NewPrompt() Prompt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPrompt")
	ret0, _ := ret[0].(Prompt)
	return ret0
}

// NewPrompt indicates an expected call of NewPrompt.
func (mr *MockPromptuiMockRecorder) NewPrompt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPrompt", reflect.TypeOf((*MockPromptui)(nil).NewPrompt))
}

// MockPrompt is a mock of Prompt interface.
type MockPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockPromptMockRecorder
}

// MockPromptMockRecorder is the mock recorder for MockPrompt.
type MockPromptMockRecorder struct {
	mock *MockPrompt
}

// NewMockPrompt creates a new mock instance.
func NewMockPrompt(ctrl *gomock.Controller) *MockPrompt {
	mock := &MockPrompt{ctrl: ctrl}
	mock.recorder = &MockPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompt) EXPECT() *MockPromptMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockPrompt) Run() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockPromptMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPrompt)(nil).Run))
}

// SetLabel mocks base method.
func (m *MockPrompt) SetLabel(label string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLabel", label)
}

// SetLabel indicates an expected call of SetLabel.
func (mr *MockPromptMockRecorder) SetLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabel", reflect.TypeOf((*MockPrompt)(nil).SetLabel), label)
}
