// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/tablewriter.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/tablewriter.go -destination=./pkg/proxy/tablewriter_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTableWriter is a mock of TableWriter interface.
type MockTableWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTableWriterMockRecorder
	isgomock struct{}
}

// MockTableWriterMockRecorder is the mock recorder for MockTableWriter.
type MockTableWriterMockRecorder struct {
	mock *MockTableWriter
}

// NewMockTableWriter creates a new mock instance.
func NewMockTableWriter(ctrl *gomock.Controller) *MockTableWriter {
	mock := &MockTableWriter{ctrl: ctrl}
	mock.recorder = &MockTableWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableWriter) EXPECT() *MockTableWriterMockRecorder {
	return m.recorder
}

// NewTable mocks base method.
func (m *MockTableWriter) NewTable(writer io.Writer) Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTable", writer)
	ret0, _ := ret[0].(Table)
	return ret0
}

// NewTable indicates an expected call of NewTable.
func (mr *MockTableWriterMockRecorder) NewTable(writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTable", reflect.TypeOf((*MockTableWriter)(nil).NewTable), writer)
}

// MockTable is a mock of Table interface.
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
	isgomock struct{}
}

// MockTableMockRecorder is the mock recorder for MockTable.
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance.
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// Bulk mocks base method.
func (m *MockTable) Bulk(rows [][]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bulk", rows)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bulk indicates an expected call of Bulk.
func (mr *MockTableMockRecorder) Bulk(rows any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bulk", reflect.TypeOf((*MockTable)(nil).Bulk), rows)
}

// Footer mocks base method.
func (m *MockTable) Footer(elements []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Footer", elements)
}

// Footer indicates an expected call of Footer.
func (mr *MockTableMockRecorder) Footer(elements any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Footer", reflect.TypeOf((*MockTable)(nil).Footer), elements)
}

// Header mocks base method.
func (m *MockTable) Header(elements []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Header", elements)
}

// Header indicates an expected call of Header.
func (mr *MockTableMockRecorder) Header(elements any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTable)(nil).Header), elements)
}

// Render mocks base method.
func (m *MockTable) Render() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render")
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render.
func (mr *MockTableMockRecorder) Render() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockTable)(nil).Render))
}
