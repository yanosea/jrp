// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/tablewriter.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/tablewriter.go -destination=./pkg/proxy/tablewriter_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTableWriter is a mock of TableWriter interface.
type MockTableWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTableWriterMockRecorder
	isgomock struct{}
}

// MockTableWriterMockRecorder is the mock recorder for MockTableWriter.
type MockTableWriterMockRecorder struct {
	mock *MockTableWriter
}

// NewMockTableWriter creates a new mock instance.
func NewMockTableWriter(ctrl *gomock.Controller) *MockTableWriter {
	mock := &MockTableWriter{ctrl: ctrl}
	mock.recorder = &MockTableWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableWriter) EXPECT() *MockTableWriterMockRecorder {
	return m.recorder
}

// NewTable mocks base method.
func (m *MockTableWriter) NewTable(writer io.Writer) Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTable", writer)
	ret0, _ := ret[0].(Table)
	return ret0
}

// NewTable indicates an expected call of NewTable.
func (mr *MockTableWriterMockRecorder) NewTable(writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTable", reflect.TypeOf((*MockTableWriter)(nil).NewTable), writer)
}

// MockTable is a mock of Table interface.
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
	isgomock struct{}
}

// MockTableMockRecorder is the mock recorder for MockTable.
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance.
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// AppendBulk mocks base method.
func (m *MockTable) AppendBulk(rows [][]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendBulk", rows)
}

// AppendBulk indicates an expected call of AppendBulk.
func (mr *MockTableMockRecorder) AppendBulk(rows any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendBulk", reflect.TypeOf((*MockTable)(nil).AppendBulk), rows)
}

// Render mocks base method.
func (m *MockTable) Render() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Render")
}

// Render indicates an expected call of Render.
func (mr *MockTableMockRecorder) Render() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockTable)(nil).Render))
}

// SetAlignment mocks base method.
func (m *MockTable) SetAlignment(align int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAlignment", align)
}

// SetAlignment indicates an expected call of SetAlignment.
func (mr *MockTableMockRecorder) SetAlignment(align any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlignment", reflect.TypeOf((*MockTable)(nil).SetAlignment), align)
}

// SetAutoFormatHeaders mocks base method.
func (m *MockTable) SetAutoFormatHeaders(auto bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAutoFormatHeaders", auto)
}

// SetAutoFormatHeaders indicates an expected call of SetAutoFormatHeaders.
func (mr *MockTableMockRecorder) SetAutoFormatHeaders(auto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoFormatHeaders", reflect.TypeOf((*MockTable)(nil).SetAutoFormatHeaders), auto)
}

// SetAutoWrapText mocks base method.
func (m *MockTable) SetAutoWrapText(auto bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAutoWrapText", auto)
}

// SetAutoWrapText indicates an expected call of SetAutoWrapText.
func (mr *MockTableMockRecorder) SetAutoWrapText(auto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoWrapText", reflect.TypeOf((*MockTable)(nil).SetAutoWrapText), auto)
}

// SetBorder mocks base method.
func (m *MockTable) SetBorder(border bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBorder", border)
}

// SetBorder indicates an expected call of SetBorder.
func (mr *MockTableMockRecorder) SetBorder(border any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBorder", reflect.TypeOf((*MockTable)(nil).SetBorder), border)
}

// SetCenterSeparator mocks base method.
func (m *MockTable) SetCenterSeparator(sep string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCenterSeparator", sep)
}

// SetCenterSeparator indicates an expected call of SetCenterSeparator.
func (mr *MockTableMockRecorder) SetCenterSeparator(sep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCenterSeparator", reflect.TypeOf((*MockTable)(nil).SetCenterSeparator), sep)
}

// SetColumnSeparator mocks base method.
func (m *MockTable) SetColumnSeparator(sep string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetColumnSeparator", sep)
}

// SetColumnSeparator indicates an expected call of SetColumnSeparator.
func (mr *MockTableMockRecorder) SetColumnSeparator(sep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetColumnSeparator", reflect.TypeOf((*MockTable)(nil).SetColumnSeparator), sep)
}

// SetHeader mocks base method.
func (m *MockTable) SetHeader(keys []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeader", keys)
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockTableMockRecorder) SetHeader(keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockTable)(nil).SetHeader), keys)
}

// SetHeaderAlignment mocks base method.
func (m *MockTable) SetHeaderAlignment(hAlign int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeaderAlignment", hAlign)
}

// SetHeaderAlignment indicates an expected call of SetHeaderAlignment.
func (mr *MockTableMockRecorder) SetHeaderAlignment(hAlign any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeaderAlignment", reflect.TypeOf((*MockTable)(nil).SetHeaderAlignment), hAlign)
}

// SetHeaderLine mocks base method.
func (m *MockTable) SetHeaderLine(line bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeaderLine", line)
}

// SetHeaderLine indicates an expected call of SetHeaderLine.
func (mr *MockTableMockRecorder) SetHeaderLine(line any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeaderLine", reflect.TypeOf((*MockTable)(nil).SetHeaderLine), line)
}

// SetNoWhiteSpace mocks base method.
func (m *MockTable) SetNoWhiteSpace(allow bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetNoWhiteSpace", allow)
}

// SetNoWhiteSpace indicates an expected call of SetNoWhiteSpace.
func (mr *MockTableMockRecorder) SetNoWhiteSpace(allow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNoWhiteSpace", reflect.TypeOf((*MockTable)(nil).SetNoWhiteSpace), allow)
}

// SetRowSeparator mocks base method.
func (m *MockTable) SetRowSeparator(sep string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRowSeparator", sep)
}

// SetRowSeparator indicates an expected call of SetRowSeparator.
func (mr *MockTableMockRecorder) SetRowSeparator(sep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRowSeparator", reflect.TypeOf((*MockTable)(nil).SetRowSeparator), sep)
}

// SetTablePadding mocks base method.
func (m *MockTable) SetTablePadding(padding string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTablePadding", padding)
}

// SetTablePadding indicates an expected call of SetTablePadding.
func (mr *MockTableMockRecorder) SetTablePadding(padding any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTablePadding", reflect.TypeOf((*MockTable)(nil).SetTablePadding), padding)
}
