// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/spinner.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/spinner.go -destination=./pkg/proxy/spinner_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSpinners is a mock of Spinners interface.
type MockSpinners struct {
	ctrl     *gomock.Controller
	recorder *MockSpinnersMockRecorder
	isgomock struct{}
}

// MockSpinnersMockRecorder is the mock recorder for MockSpinners.
type MockSpinnersMockRecorder struct {
	mock *MockSpinners
}

// NewMockSpinners creates a new mock instance.
func NewMockSpinners(ctrl *gomock.Controller) *MockSpinners {
	mock := &MockSpinners{ctrl: ctrl}
	mock.recorder = &MockSpinnersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpinners) EXPECT() *MockSpinnersMockRecorder {
	return m.recorder
}

// NewSpinner mocks base method.
func (m *MockSpinners) NewSpinner() Spinner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSpinner")
	ret0, _ := ret[0].(Spinner)
	return ret0
}

// NewSpinner indicates an expected call of NewSpinner.
func (mr *MockSpinnersMockRecorder) NewSpinner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSpinner", reflect.TypeOf((*MockSpinners)(nil).NewSpinner))
}

// MockSpinner is a mock of Spinner interface.
type MockSpinner struct {
	ctrl     *gomock.Controller
	recorder *MockSpinnerMockRecorder
	isgomock struct{}
}

// MockSpinnerMockRecorder is the mock recorder for MockSpinner.
type MockSpinnerMockRecorder struct {
	mock *MockSpinner
}

// NewMockSpinner creates a new mock instance.
func NewMockSpinner(ctrl *gomock.Controller) *MockSpinner {
	mock := &MockSpinner{ctrl: ctrl}
	mock.recorder = &MockSpinnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpinner) EXPECT() *MockSpinnerMockRecorder {
	return m.recorder
}

// Reverse mocks base method.
func (m *MockSpinner) Reverse() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reverse")
}

// Reverse indicates an expected call of Reverse.
func (mr *MockSpinnerMockRecorder) Reverse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reverse", reflect.TypeOf((*MockSpinner)(nil).Reverse))
}

// SetColor mocks base method.
func (m *MockSpinner) SetColor(colors ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range colors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetColor", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetColor indicates an expected call of SetColor.
func (mr *MockSpinnerMockRecorder) SetColor(colors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetColor", reflect.TypeOf((*MockSpinner)(nil).SetColor), colors...)
}

// SetSuffix mocks base method.
func (m *MockSpinner) SetSuffix(suffix string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSuffix", suffix)
}

// SetSuffix indicates an expected call of SetSuffix.
func (mr *MockSpinnerMockRecorder) SetSuffix(suffix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuffix", reflect.TypeOf((*MockSpinner)(nil).SetSuffix), suffix)
}

// Start mocks base method.
func (m *MockSpinner) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockSpinnerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSpinner)(nil).Start))
}

// Stop mocks base method.
func (m *MockSpinner) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSpinnerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSpinner)(nil).Stop))
}
