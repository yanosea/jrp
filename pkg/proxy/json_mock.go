// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/json.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/json.go -destination=./pkg/proxy/json_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJson is a mock of Json interface.
type MockJson struct {
	ctrl     *gomock.Controller
	recorder *MockJsonMockRecorder
}

// MockJsonMockRecorder is the mock recorder for MockJson.
type MockJsonMockRecorder struct {
	mock *MockJson
}

// NewMockJson creates a new mock instance.
func NewMockJson(ctrl *gomock.Controller) *MockJson {
	mock := &MockJson{ctrl: ctrl}
	mock.recorder = &MockJsonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJson) EXPECT() *MockJsonMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockJson) Marshal(v any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", v)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockJsonMockRecorder) Marshal(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockJson)(nil).Marshal), v)
}
