// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/echo.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/echo.go -destination=./pkg/proxy/echo_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockEchos is a mock of Echos interface.
type MockEchos struct {
	ctrl     *gomock.Controller
	recorder *MockEchosMockRecorder
}

// MockEchosMockRecorder is the mock recorder for MockEchos.
type MockEchosMockRecorder struct {
	mock *MockEchos
}

// NewMockEchos creates a new mock instance.
func NewMockEchos(ctrl *gomock.Controller) *MockEchos {
	mock := &MockEchos{ctrl: ctrl}
	mock.recorder = &MockEchosMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEchos) EXPECT() *MockEchosMockRecorder {
	return m.recorder
}

// NewEcho mocks base method.
func (m *MockEchos) NewEcho() (Echo, Logger) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEcho")
	ret0, _ := ret[0].(Echo)
	ret1, _ := ret[1].(Logger)
	return ret0, ret1
}

// NewEcho indicates an expected call of NewEcho.
func (mr *MockEchosMockRecorder) NewEcho() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEcho", reflect.TypeOf((*MockEchos)(nil).NewEcho))
}

// MockEcho is a mock of Echo interface.
type MockEcho struct {
	ctrl     *gomock.Controller
	recorder *MockEchoMockRecorder
}

// MockEchoMockRecorder is the mock recorder for MockEcho.
type MockEchoMockRecorder struct {
	mock *MockEcho
}

// NewMockEcho creates a new mock instance.
func NewMockEcho(ctrl *gomock.Controller) *MockEcho {
	mock := &MockEcho{ctrl: ctrl}
	mock.recorder = &MockEchoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcho) EXPECT() *MockEchoMockRecorder {
	return m.recorder
}

// Group mocks base method.
func (m_2 *MockEcho) Group(prefix string, m ...echo.MiddlewareFunc) Group {
	m_2.ctrl.T.Helper()
	varargs := []any{prefix}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	ret := m_2.ctrl.Call(m_2, "Group", varargs...)
	ret0, _ := ret[0].(Group)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockEchoMockRecorder) Group(prefix any, m ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{prefix}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockEcho)(nil).Group), varargs...)
}

// Start mocks base method.
func (m *MockEcho) Start(address string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockEchoMockRecorder) Start(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEcho)(nil).Start), address)
}

// Use mocks base method.
func (m *MockEcho) Use(middleware ...echo.MiddlewareFunc) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range middleware {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Use", varargs...)
}

// Use indicates an expected call of Use.
func (mr *MockEchoMockRecorder) Use(middleware ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockEcho)(nil).Use), middleware...)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", err)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), err)
}

// MockGroup is a mock of Group interface.
type MockGroup struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMockRecorder
}

// MockGroupMockRecorder is the mock recorder for MockGroup.
type MockGroupMockRecorder struct {
	mock *MockGroup
}

// NewMockGroup creates a new mock instance.
func NewMockGroup(ctrl *gomock.Controller) *MockGroup {
	mock := &MockGroup{ctrl: ctrl}
	mock.recorder = &MockGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroup) EXPECT() *MockGroupMockRecorder {
	return m.recorder
}

// GET mocks base method.
func (m_2 *MockGroup) GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) {
	m_2.ctrl.T.Helper()
	varargs := []any{path, h}
	for _, a := range m {
		varargs = append(varargs, a)
	}
	m_2.ctrl.Call(m_2, "GET", varargs...)
}

// GET indicates an expected call of GET.
func (mr *MockGroupMockRecorder) GET(path, h any, m ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{path, h}, m...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockGroup)(nil).GET), varargs...)
}
