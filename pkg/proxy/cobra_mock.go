// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/cobra.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/cobra.go -destination=./pkg/proxy/cobra_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	context "context"
	reflect "reflect"

	cobra "github.com/spf13/cobra"
	gomock "go.uber.org/mock/gomock"
)

// MockCobra is a mock of Cobra interface.
type MockCobra struct {
	ctrl     *gomock.Controller
	recorder *MockCobraMockRecorder
	isgomock struct{}
}

// MockCobraMockRecorder is the mock recorder for MockCobra.
type MockCobraMockRecorder struct {
	mock *MockCobra
}

// NewMockCobra creates a new mock instance.
func NewMockCobra(ctrl *gomock.Controller) *MockCobra {
	mock := &MockCobra{ctrl: ctrl}
	mock.recorder = &MockCobraMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCobra) EXPECT() *MockCobraMockRecorder {
	return m.recorder
}

// ExactArgs mocks base method.
func (m *MockCobra) ExactArgs(n int) cobra.PositionalArgs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExactArgs", n)
	ret0, _ := ret[0].(cobra.PositionalArgs)
	return ret0
}

// ExactArgs indicates an expected call of ExactArgs.
func (mr *MockCobraMockRecorder) ExactArgs(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExactArgs", reflect.TypeOf((*MockCobra)(nil).ExactArgs), n)
}

// MaximumNArgs mocks base method.
func (m *MockCobra) MaximumNArgs(n int) cobra.PositionalArgs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaximumNArgs", n)
	ret0, _ := ret[0].(cobra.PositionalArgs)
	return ret0
}

// MaximumNArgs indicates an expected call of MaximumNArgs.
func (mr *MockCobraMockRecorder) MaximumNArgs(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaximumNArgs", reflect.TypeOf((*MockCobra)(nil).MaximumNArgs), n)
}

// NewCommand mocks base method.
func (m *MockCobra) NewCommand() Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommand")
	ret0, _ := ret[0].(Command)
	return ret0
}

// NewCommand indicates an expected call of NewCommand.
func (mr *MockCobraMockRecorder) NewCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommand", reflect.TypeOf((*MockCobra)(nil).NewCommand))
}

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
	isgomock struct{}
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// AddCommand mocks base method.
func (m *MockCommand) AddCommand(cmds ...Command) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range cmds {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddCommand", varargs...)
}

// AddCommand indicates an expected call of AddCommand.
func (mr *MockCommandMockRecorder) AddCommand(cmds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommand", reflect.TypeOf((*MockCommand)(nil).AddCommand), cmds...)
}

// ExecuteContext mocks base method.
func (m *MockCommand) ExecuteContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteContext indicates an expected call of ExecuteContext.
func (mr *MockCommandMockRecorder) ExecuteContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteContext", reflect.TypeOf((*MockCommand)(nil).ExecuteContext), ctx)
}

// Flags mocks base method.
func (m *MockCommand) Flags() FlagSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flags")
	ret0, _ := ret[0].(FlagSet)
	return ret0
}

// Flags indicates an expected call of Flags.
func (mr *MockCommandMockRecorder) Flags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flags", reflect.TypeOf((*MockCommand)(nil).Flags))
}

// GetCommand mocks base method.
func (m *MockCommand) GetCommand() *cobra.Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommand")
	ret0, _ := ret[0].(*cobra.Command)
	return ret0
}

// GetCommand indicates an expected call of GetCommand.
func (mr *MockCommandMockRecorder) GetCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommand", reflect.TypeOf((*MockCommand)(nil).GetCommand))
}

// PersistentFlags mocks base method.
func (m *MockCommand) PersistentFlags() FlagSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentFlags")
	ret0, _ := ret[0].(FlagSet)
	return ret0
}

// PersistentFlags indicates an expected call of PersistentFlags.
func (mr *MockCommandMockRecorder) PersistentFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentFlags", reflect.TypeOf((*MockCommand)(nil).PersistentFlags))
}

// RunE mocks base method.
func (m *MockCommand) RunE(cmd *cobra.Command, args []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunE", cmd, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunE indicates an expected call of RunE.
func (mr *MockCommandMockRecorder) RunE(cmd, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunE", reflect.TypeOf((*MockCommand)(nil).RunE), cmd, args)
}

// SetAliases mocks base method.
func (m *MockCommand) SetAliases(s []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAliases", s)
}

// SetAliases indicates an expected call of SetAliases.
func (mr *MockCommandMockRecorder) SetAliases(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAliases", reflect.TypeOf((*MockCommand)(nil).SetAliases), s)
}

// SetArgs mocks base method.
func (m *MockCommand) SetArgs(f cobra.PositionalArgs) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetArgs", f)
}

// SetArgs indicates an expected call of SetArgs.
func (mr *MockCommandMockRecorder) SetArgs(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArgs", reflect.TypeOf((*MockCommand)(nil).SetArgs), f)
}

// SetHelpTemplate mocks base method.
func (m *MockCommand) SetHelpTemplate(s string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHelpTemplate", s)
}

// SetHelpTemplate indicates an expected call of SetHelpTemplate.
func (mr *MockCommandMockRecorder) SetHelpTemplate(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHelpTemplate", reflect.TypeOf((*MockCommand)(nil).SetHelpTemplate), s)
}

// SetRunE mocks base method.
func (m *MockCommand) SetRunE(f func(*cobra.Command, []string) error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRunE", f)
}

// SetRunE indicates an expected call of SetRunE.
func (mr *MockCommandMockRecorder) SetRunE(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunE", reflect.TypeOf((*MockCommand)(nil).SetRunE), f)
}

// SetSilenceErrors mocks base method.
func (m *MockCommand) SetSilenceErrors(b bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSilenceErrors", b)
}

// SetSilenceErrors indicates an expected call of SetSilenceErrors.
func (mr *MockCommandMockRecorder) SetSilenceErrors(b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSilenceErrors", reflect.TypeOf((*MockCommand)(nil).SetSilenceErrors), b)
}

// SetUsageTemplate mocks base method.
func (m *MockCommand) SetUsageTemplate(s string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUsageTemplate", s)
}

// SetUsageTemplate indicates an expected call of SetUsageTemplate.
func (mr *MockCommandMockRecorder) SetUsageTemplate(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUsageTemplate", reflect.TypeOf((*MockCommand)(nil).SetUsageTemplate), s)
}

// SetUse mocks base method.
func (m *MockCommand) SetUse(s string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUse", s)
}

// SetUse indicates an expected call of SetUse.
func (mr *MockCommandMockRecorder) SetUse(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUse", reflect.TypeOf((*MockCommand)(nil).SetUse), s)
}
