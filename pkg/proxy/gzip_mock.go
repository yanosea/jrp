// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/proxy/gzip.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/proxy/gzip.go -destination=./pkg/proxy/gzip_mock.go -package=proxy
//

// Package proxy is a generated GoMock package.
package proxy

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGzip is a mock of Gzip interface.
type MockGzip struct {
	ctrl     *gomock.Controller
	recorder *MockGzipMockRecorder
}

// MockGzipMockRecorder is the mock recorder for MockGzip.
type MockGzipMockRecorder struct {
	mock *MockGzip
}

// NewMockGzip creates a new mock instance.
func NewMockGzip(ctrl *gomock.Controller) *MockGzip {
	mock := &MockGzip{ctrl: ctrl}
	mock.recorder = &MockGzipMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGzip) EXPECT() *MockGzipMockRecorder {
	return m.recorder
}

// NewReader mocks base method.
func (m *MockGzip) NewReader(r io.Reader) (GzipReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", r)
	ret0, _ := ret[0].(GzipReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader.
func (mr *MockGzipMockRecorder) NewReader(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockGzip)(nil).NewReader), r)
}

// MockGzipReader is a mock of GzipReader interface.
type MockGzipReader struct {
	ctrl     *gomock.Controller
	recorder *MockGzipReaderMockRecorder
}

// MockGzipReaderMockRecorder is the mock recorder for MockGzipReader.
type MockGzipReaderMockRecorder struct {
	mock *MockGzipReader
}

// NewMockGzipReader creates a new mock instance.
func NewMockGzipReader(ctrl *gomock.Controller) *MockGzipReader {
	mock := &MockGzipReader{ctrl: ctrl}
	mock.recorder = &MockGzipReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGzipReader) EXPECT() *MockGzipReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockGzipReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGzipReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGzipReader)(nil).Close))
}

// Read mocks base method.
func (m *MockGzipReader) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockGzipReaderMockRecorder) Read(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockGzipReader)(nil).Read), p)
}
