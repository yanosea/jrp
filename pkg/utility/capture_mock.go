// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/utility/capture.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/utility/capture.go -destination=./pkg/utility/capture_mock.go -package=utility
//

// Package utility is a generated GoMock package.
package utility

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCapturer is a mock of Capturer interface.
type MockCapturer struct {
	ctrl     *gomock.Controller
	recorder *MockCapturerMockRecorder
}

// MockCapturerMockRecorder is the mock recorder for MockCapturer.
type MockCapturerMockRecorder struct {
	mock *MockCapturer
}

// NewMockCapturer creates a new mock instance.
func NewMockCapturer(ctrl *gomock.Controller) *MockCapturer {
	mock := &MockCapturer{ctrl: ctrl}
	mock.recorder = &MockCapturerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCapturer) EXPECT() *MockCapturerMockRecorder {
	return m.recorder
}

// CaptureOutput mocks base method.
func (m *MockCapturer) CaptureOutput(fnc func()) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CaptureOutput", fnc)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CaptureOutput indicates an expected call of CaptureOutput.
func (mr *MockCapturerMockRecorder) CaptureOutput(fnc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CaptureOutput", reflect.TypeOf((*MockCapturer)(nil).CaptureOutput), fnc)
}
