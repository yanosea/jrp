// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/utility/download_util.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/utility/download_util.go -destination=./pkg/utility/download_util_mock.go -package=utility
//

// Package utility is a generated GoMock package.
package utility

import (
	reflect "reflect"

	proxy "github.com/yanosea/jrp/v2/pkg/proxy"
	gomock "go.uber.org/mock/gomock"
)

// MockDownloadUtil is a mock of DownloadUtil interface.
type MockDownloadUtil struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadUtilMockRecorder
	isgomock struct{}
}

// MockDownloadUtilMockRecorder is the mock recorder for MockDownloadUtil.
type MockDownloadUtilMockRecorder struct {
	mock *MockDownloadUtil
}

// NewMockDownloadUtil creates a new mock instance.
func NewMockDownloadUtil(ctrl *gomock.Controller) *MockDownloadUtil {
	mock := &MockDownloadUtil{ctrl: ctrl}
	mock.recorder = &MockDownloadUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadUtil) EXPECT() *MockDownloadUtilMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockDownloadUtil) Download(url string) (proxy.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", url)
	ret0, _ := ret[0].(proxy.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockDownloadUtilMockRecorder) Download(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockDownloadUtil)(nil).Download), url)
}
