// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/utility/prompt_util.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/utility/prompt_util.go -destination=./pkg/utility/prompt_util_mock.go -package=utility
//

// Package utility is a generated GoMock package.
package utility

import (
	reflect "reflect"

	proxy "github.com/yanosea/jrp/v2/pkg/proxy"
	gomock "go.uber.org/mock/gomock"
)

// MockPromptUtil is a mock of PromptUtil interface.
type MockPromptUtil struct {
	ctrl     *gomock.Controller
	recorder *MockPromptUtilMockRecorder
}

// MockPromptUtilMockRecorder is the mock recorder for MockPromptUtil.
type MockPromptUtilMockRecorder struct {
	mock *MockPromptUtil
}

// NewMockPromptUtil creates a new mock instance.
func NewMockPromptUtil(ctrl *gomock.Controller) *MockPromptUtil {
	mock := &MockPromptUtil{ctrl: ctrl}
	mock.recorder = &MockPromptUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromptUtil) EXPECT() *MockPromptUtilMockRecorder {
	return m.recorder
}

// GetPrompt mocks base method.
func (m *MockPromptUtil) GetPrompt(label string) proxy.Prompt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrompt", label)
	ret0, _ := ret[0].(proxy.Prompt)
	return ret0
}

// GetPrompt indicates an expected call of GetPrompt.
func (mr *MockPromptUtilMockRecorder) GetPrompt(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrompt", reflect.TypeOf((*MockPromptUtil)(nil).GetPrompt), label)
}
