// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/utility/version_util.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/utility/version_util.go -destination=./pkg/utility/version_util_mock.go -package=utility
//

// Package utility is a generated GoMock package.
package utility

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVersionUtil is a mock of VersionUtil interface.
type MockVersionUtil struct {
	ctrl     *gomock.Controller
	recorder *MockVersionUtilMockRecorder
	isgomock struct{}
}

// MockVersionUtilMockRecorder is the mock recorder for MockVersionUtil.
type MockVersionUtilMockRecorder struct {
	mock *MockVersionUtil
}

// NewMockVersionUtil creates a new mock instance.
func NewMockVersionUtil(ctrl *gomock.Controller) *MockVersionUtil {
	mock := &MockVersionUtil{ctrl: ctrl}
	mock.recorder = &MockVersionUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionUtil) EXPECT() *MockVersionUtilMockRecorder {
	return m.recorder
}

// GetVersion mocks base method.
func (m *MockVersionUtil) GetVersion(version string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", version)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockVersionUtilMockRecorder) GetVersion(version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockVersionUtil)(nil).GetVersion), version)
}
