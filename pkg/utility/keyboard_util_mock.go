// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/utility/keyboard_util.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/utility/keyboard_util.go -destination=./pkg/utility/keyboard_util_mock.go -package=utility
//

// Package utility is a generated GoMock package.
package utility

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKeyboardUtil is a mock of KeyboardUtil interface.
type MockKeyboardUtil struct {
	ctrl     *gomock.Controller
	recorder *MockKeyboardUtilMockRecorder
}

// MockKeyboardUtilMockRecorder is the mock recorder for MockKeyboardUtil.
type MockKeyboardUtilMockRecorder struct {
	mock *MockKeyboardUtil
}

// NewMockKeyboardUtil creates a new mock instance.
func NewMockKeyboardUtil(ctrl *gomock.Controller) *MockKeyboardUtil {
	mock := &MockKeyboardUtil{ctrl: ctrl}
	mock.recorder = &MockKeyboardUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyboardUtil) EXPECT() *MockKeyboardUtilMockRecorder {
	return m.recorder
}

// CloseKeyboard mocks base method.
func (m *MockKeyboardUtil) CloseKeyboard() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseKeyboard")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseKeyboard indicates an expected call of CloseKeyboard.
func (mr *MockKeyboardUtilMockRecorder) CloseKeyboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseKeyboard", reflect.TypeOf((*MockKeyboardUtil)(nil).CloseKeyboard))
}

// GetKey mocks base method.
func (m *MockKeyboardUtil) GetKey(timeoutSec int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", timeoutSec)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockKeyboardUtilMockRecorder) GetKey(timeoutSec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockKeyboardUtil)(nil).GetKey), timeoutSec)
}

// OpenKeyboard mocks base method.
func (m *MockKeyboardUtil) OpenKeyboard() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenKeyboard")
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenKeyboard indicates an expected call of OpenKeyboard.
func (mr *MockKeyboardUtilMockRecorder) OpenKeyboard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenKeyboard", reflect.TypeOf((*MockKeyboardUtil)(nil).OpenKeyboard))
}
