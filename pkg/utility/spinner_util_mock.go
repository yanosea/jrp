// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/utility/spinner_util.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/utility/spinner_util.go -destination=./pkg/utility/spinner_util_mock.go -package=utility
//

// Package utility is a generated GoMock package.
package utility

import (
	reflect "reflect"

	proxy "github.com/yanosea/jrp/v2/pkg/proxy"
	gomock "go.uber.org/mock/gomock"
)

// MockSpinnerUtil is a mock of SpinnerUtil interface.
type MockSpinnerUtil struct {
	ctrl     *gomock.Controller
	recorder *MockSpinnerUtilMockRecorder
}

// MockSpinnerUtilMockRecorder is the mock recorder for MockSpinnerUtil.
type MockSpinnerUtilMockRecorder struct {
	mock *MockSpinnerUtil
}

// NewMockSpinnerUtil creates a new mock instance.
func NewMockSpinnerUtil(ctrl *gomock.Controller) *MockSpinnerUtil {
	mock := &MockSpinnerUtil{ctrl: ctrl}
	mock.recorder = &MockSpinnerUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpinnerUtil) EXPECT() *MockSpinnerUtilMockRecorder {
	return m.recorder
}

// GetSpinner mocks base method.
func (m *MockSpinnerUtil) GetSpinner(isReversed bool, color, suffix string) (proxy.Spinner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpinner", isReversed, color, suffix)
	ret0, _ := ret[0].(proxy.Spinner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpinner indicates an expected call of GetSpinner.
func (mr *MockSpinnerUtilMockRecorder) GetSpinner(isReversed, color, suffix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpinner", reflect.TypeOf((*MockSpinnerUtil)(nil).GetSpinner), isReversed, color, suffix)
}
