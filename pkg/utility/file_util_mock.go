// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/utility/file_util.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/utility/file_util.go -destination=./pkg/utility/file_util_mock.go -package=utility
//

// Package utility is a generated GoMock package.
package utility

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileUtil is a mock of FileUtil interface.
type MockFileUtil struct {
	ctrl     *gomock.Controller
	recorder *MockFileUtilMockRecorder
}

// MockFileUtilMockRecorder is the mock recorder for MockFileUtil.
type MockFileUtilMockRecorder struct {
	mock *MockFileUtil
}

// NewMockFileUtil creates a new mock instance.
func NewMockFileUtil(ctrl *gomock.Controller) *MockFileUtil {
	mock := &MockFileUtil{ctrl: ctrl}
	mock.recorder = &MockFileUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileUtil) EXPECT() *MockFileUtilMockRecorder {
	return m.recorder
}

// ExtractGzFile mocks base method.
func (m *MockFileUtil) ExtractGzFile(gzFilePath, destDir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractGzFile", gzFilePath, destDir)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtractGzFile indicates an expected call of ExtractGzFile.
func (mr *MockFileUtilMockRecorder) ExtractGzFile(gzFilePath, destDir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractGzFile", reflect.TypeOf((*MockFileUtil)(nil).ExtractGzFile), gzFilePath, destDir)
}

// GetXDGDataHome mocks base method.
func (m *MockFileUtil) GetXDGDataHome() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXDGDataHome")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetXDGDataHome indicates an expected call of GetXDGDataHome.
func (mr *MockFileUtilMockRecorder) GetXDGDataHome() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXDGDataHome", reflect.TypeOf((*MockFileUtil)(nil).GetXDGDataHome))
}

// HideFile mocks base method.
func (m *MockFileUtil) HideFile(filePath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HideFile", filePath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HideFile indicates an expected call of HideFile.
func (mr *MockFileUtilMockRecorder) HideFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HideFile", reflect.TypeOf((*MockFileUtil)(nil).HideFile), filePath)
}

// IsExist mocks base method.
func (m *MockFileUtil) IsExist(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExist", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExist indicates an expected call of IsExist.
func (mr *MockFileUtilMockRecorder) IsExist(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExist", reflect.TypeOf((*MockFileUtil)(nil).IsExist), name)
}

// MkdirIfNotExist mocks base method.
func (m *MockFileUtil) MkdirIfNotExist(dirPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirIfNotExist", dirPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirIfNotExist indicates an expected call of MkdirIfNotExist.
func (mr *MockFileUtilMockRecorder) MkdirIfNotExist(dirPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirIfNotExist", reflect.TypeOf((*MockFileUtil)(nil).MkdirIfNotExist), dirPath)
}

// RemoveAll mocks base method.
func (m *MockFileUtil) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFileUtilMockRecorder) RemoveAll(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFileUtil)(nil).RemoveAll), path)
}

// SaveToTempFile mocks base method.
func (m *MockFileUtil) SaveToTempFile(body io.Reader, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveToTempFile", body, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveToTempFile indicates an expected call of SaveToTempFile.
func (mr *MockFileUtilMockRecorder) SaveToTempFile(body, fileName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToTempFile", reflect.TypeOf((*MockFileUtil)(nil).SaveToTempFile), body, fileName)
}

// UnhideFile mocks base method.
func (m *MockFileUtil) UnhideFile(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnhideFile", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnhideFile indicates an expected call of UnhideFile.
func (mr *MockFileUtilMockRecorder) UnhideFile(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnhideFile", reflect.TypeOf((*MockFileUtil)(nil).UnhideFile), filePath)
}
