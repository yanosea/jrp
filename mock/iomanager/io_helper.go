// Code generated by MockGen. DO NOT EDIT.
// Source: internal/iomanager/io_helper.go
//
// Generated by this command:
//
//	mockgen -source=internal/iomanager/io_helper.go -destination=mock/iomanager/io_helper.go -package=mock_iomanager
//

// Package mock_iomanager is a generated GoMock package.
package mock_iomanager

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIOHelper is a mock of IOHelper interface.
type MockIOHelper struct {
	ctrl     *gomock.Controller
	recorder *MockIOHelperMockRecorder
}

// MockIOHelperMockRecorder is the mock recorder for MockIOHelper.
type MockIOHelperMockRecorder struct {
	mock *MockIOHelper
}

// NewMockIOHelper creates a new mock instance.
func NewMockIOHelper(ctrl *gomock.Controller) *MockIOHelper {
	mock := &MockIOHelper{ctrl: ctrl}
	mock.recorder = &MockIOHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOHelper) EXPECT() *MockIOHelperMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockIOHelper) Copy(dst io.Writer, src io.Reader) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", dst, src)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy.
func (mr *MockIOHelperMockRecorder) Copy(dst, src any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockIOHelper)(nil).Copy), dst, src)
}
