// Code generated by MockGen. DO NOT EDIT.
// Source: internal/gzip/gzip_handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/gzip/gzip_handler.go -destination=mock/gzip/gzip_handler.go -package=mock_gzip
//

// Package mock_gzip is a generated GoMock package.
package mock_gzip

import (
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGzipHandler is a mock of GzipHandler interface.
type MockGzipHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGzipHandlerMockRecorder
}

// MockGzipHandlerMockRecorder is the mock recorder for MockGzipHandler.
type MockGzipHandlerMockRecorder struct {
	mock *MockGzipHandler
}

// NewMockGzipHandler creates a new mock instance.
func NewMockGzipHandler(ctrl *gomock.Controller) *MockGzipHandler {
	mock := &MockGzipHandler{ctrl: ctrl}
	mock.recorder = &MockGzipHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGzipHandler) EXPECT() *MockGzipHandlerMockRecorder {
	return m.recorder
}

// NewReader mocks base method.
func (m *MockGzipHandler) NewReader(r io.Reader) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", r)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader.
func (mr *MockGzipHandlerMockRecorder) NewReader(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockGzipHandler)(nil).NewReader), r)
}
