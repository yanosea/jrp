// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/http/httpproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/http/httpproxy.go -destination=../mock/app/proxy/http/httpproxy.go -package=mockhttpproxy
//

// Package mockhttpproxy is a generated GoMock package.
package mockhttpproxy

import (
	reflect "reflect"

	httpproxy "github.com/yanosea/jrp/app/proxy/http"
	gomock "go.uber.org/mock/gomock"
)

// MockHttp is a mock of Http interface.
type MockHttp struct {
	ctrl     *gomock.Controller
	recorder *MockHttpMockRecorder
}

// MockHttpMockRecorder is the mock recorder for MockHttp.
type MockHttpMockRecorder struct {
	mock *MockHttp
}

// NewMockHttp creates a new mock instance.
func NewMockHttp(ctrl *gomock.Controller) *MockHttp {
	mock := &MockHttp{ctrl: ctrl}
	mock.recorder = &MockHttpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttp) EXPECT() *MockHttpMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHttp) Get(url string) (*httpproxy.ResponseInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].(*httpproxy.ResponseInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHttpMockRecorder) Get(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttp)(nil).Get), url)
}
