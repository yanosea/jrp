// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/sort/sortproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/sort/sortproxy.go -destination=../mock/app/proxy/sort/sortproxy.go -package=mocksortproxy
//

// Package mocksortproxy is a generated GoMock package.
package mocksortproxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSort is a mock of Sort interface.
type MockSort struct {
	ctrl     *gomock.Controller
	recorder *MockSortMockRecorder
}

// MockSortMockRecorder is the mock recorder for MockSort.
type MockSortMockRecorder struct {
	mock *MockSort
}

// NewMockSort creates a new mock instance.
func NewMockSort(ctrl *gomock.Controller) *MockSort {
	mock := &MockSort{ctrl: ctrl}
	mock.recorder = &MockSortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSort) EXPECT() *MockSortMockRecorder {
	return m.recorder
}

// Slice mocks base method.
func (m *MockSort) Slice(x any, less func(int, int) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Slice", x, less)
}

// Slice indicates an expected call of Slice.
func (mr *MockSortMockRecorder) Slice(x, less any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Slice", reflect.TypeOf((*MockSort)(nil).Slice), x, less)
}
