// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/keyboard/keyboardproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/keyboard/keyboardproxy.go -destination=../mock/app/proxy/keyboard/keyboardproxy.go -package=mockkeyboardproxy
//

// Package mockkeyboardproxy is a generated GoMock package.
package mockkeyboardproxy

import (
	reflect "reflect"

	keyboard "github.com/eiannone/keyboard"
	gomock "go.uber.org/mock/gomock"
)

// MockKeyboard is a mock of Keyboard interface.
type MockKeyboard struct {
	ctrl     *gomock.Controller
	recorder *MockKeyboardMockRecorder
}

// MockKeyboardMockRecorder is the mock recorder for MockKeyboard.
type MockKeyboardMockRecorder struct {
	mock *MockKeyboard
}

// NewMockKeyboard creates a new mock instance.
func NewMockKeyboard(ctrl *gomock.Controller) *MockKeyboard {
	mock := &MockKeyboard{ctrl: ctrl}
	mock.recorder = &MockKeyboardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyboard) EXPECT() *MockKeyboardMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockKeyboard) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockKeyboardMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKeyboard)(nil).Close))
}

// GetKey mocks base method.
func (m *MockKeyboard) GetKey(timeoutSec int) (rune, keyboard.Key, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", timeoutSec)
	ret0, _ := ret[0].(rune)
	ret1, _ := ret[1].(keyboard.Key)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKey indicates an expected call of GetKey.
func (mr *MockKeyboardMockRecorder) GetKey(timeoutSec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockKeyboard)(nil).GetKey), timeoutSec)
}

// Open mocks base method.
func (m *MockKeyboard) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockKeyboardMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockKeyboard)(nil).Open))
}
