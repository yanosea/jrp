// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/sql/txinstance.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/sql/txinstance.go -destination=../mock/app/proxy/sql/txinstance.go -package=mocksqlproxy
//

// Package mocksqlproxy is a generated GoMock package.
package mocksqlproxy

import (
	reflect "reflect"

	sqlproxy "github.com/yanosea/jrp/app/proxy/sql"
	gomock "go.uber.org/mock/gomock"
)

// MockTxInstanceInterface is a mock of TxInstanceInterface interface.
type MockTxInstanceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTxInstanceInterfaceMockRecorder
}

// MockTxInstanceInterfaceMockRecorder is the mock recorder for MockTxInstanceInterface.
type MockTxInstanceInterfaceMockRecorder struct {
	mock *MockTxInstanceInterface
}

// NewMockTxInstanceInterface creates a new mock instance.
func NewMockTxInstanceInterface(ctrl *gomock.Controller) *MockTxInstanceInterface {
	mock := &MockTxInstanceInterface{ctrl: ctrl}
	mock.recorder = &MockTxInstanceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxInstanceInterface) EXPECT() *MockTxInstanceInterfaceMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTxInstanceInterface) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxInstanceInterfaceMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxInstanceInterface)(nil).Commit))
}

// Exec mocks base method.
func (m *MockTxInstanceInterface) Exec(query string, args ...any) (sqlproxy.ResultInstanceInterface, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sqlproxy.ResultInstanceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockTxInstanceInterfaceMockRecorder) Exec(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockTxInstanceInterface)(nil).Exec), varargs...)
}

// QueryRow mocks base method.
func (m *MockTxInstanceInterface) QueryRow(query string, args ...any) sqlproxy.RowInstanceInterface {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(sqlproxy.RowInstanceInterface)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockTxInstanceInterfaceMockRecorder) QueryRow(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockTxInstanceInterface)(nil).QueryRow), varargs...)
}

// Rollback mocks base method.
func (m *MockTxInstanceInterface) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTxInstanceInterfaceMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTxInstanceInterface)(nil).Rollback))
}
