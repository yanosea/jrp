// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/sql/rowsinstance.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/sql/rowsinstance.go -destination=../mock/app/proxy/sql/rowsinstance.go -package=mocksqlproxy
//

// Package mocksqlproxy is a generated GoMock package.
package mocksqlproxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRowsInstanceInterface is a mock of RowsInstanceInterface interface.
type MockRowsInstanceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRowsInstanceInterfaceMockRecorder
}

// MockRowsInstanceInterfaceMockRecorder is the mock recorder for MockRowsInstanceInterface.
type MockRowsInstanceInterfaceMockRecorder struct {
	mock *MockRowsInstanceInterface
}

// NewMockRowsInstanceInterface creates a new mock instance.
func NewMockRowsInstanceInterface(ctrl *gomock.Controller) *MockRowsInstanceInterface {
	mock := &MockRowsInstanceInterface{ctrl: ctrl}
	mock.recorder = &MockRowsInstanceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowsInstanceInterface) EXPECT() *MockRowsInstanceInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRowsInstanceInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRowsInstanceInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRowsInstanceInterface)(nil).Close))
}

// Next mocks base method.
func (m *MockRowsInstanceInterface) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockRowsInstanceInterfaceMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRowsInstanceInterface)(nil).Next))
}

// Scan mocks base method.
func (m *MockRowsInstanceInterface) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowsInstanceInterfaceMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRowsInstanceInterface)(nil).Scan), dest...)
}
