// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/sql/dbinstance.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/sql/dbinstance.go -destination=../mock/app/proxy/sql/dbinstance.go -package=mocksqlproxy
//

// Package mocksqlproxy is a generated GoMock package.
package mocksqlproxy

import (
	reflect "reflect"

	sqlproxy "github.com/yanosea/jrp/app/proxy/sql"
	gomock "go.uber.org/mock/gomock"
)

// MockDBInstanceInterface is a mock of DBInstanceInterface interface.
type MockDBInstanceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBInstanceInterfaceMockRecorder
}

// MockDBInstanceInterfaceMockRecorder is the mock recorder for MockDBInstanceInterface.
type MockDBInstanceInterfaceMockRecorder struct {
	mock *MockDBInstanceInterface
}

// NewMockDBInstanceInterface creates a new mock instance.
func NewMockDBInstanceInterface(ctrl *gomock.Controller) *MockDBInstanceInterface {
	mock := &MockDBInstanceInterface{ctrl: ctrl}
	mock.recorder = &MockDBInstanceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBInstanceInterface) EXPECT() *MockDBInstanceInterfaceMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockDBInstanceInterface) Begin() (sqlproxy.TxInstanceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(sqlproxy.TxInstanceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockDBInstanceInterfaceMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDBInstanceInterface)(nil).Begin))
}

// Close mocks base method.
func (m *MockDBInstanceInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBInstanceInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBInstanceInterface)(nil).Close))
}

// Exec mocks base method.
func (m *MockDBInstanceInterface) Exec(query string, args ...any) (sqlproxy.ResultInstanceInterface, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sqlproxy.ResultInstanceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockDBInstanceInterfaceMockRecorder) Exec(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBInstanceInterface)(nil).Exec), varargs...)
}

// Prepare mocks base method.
func (m *MockDBInstanceInterface) Prepare(query string) (sqlproxy.StmtInstanceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", query)
	ret0, _ := ret[0].(sqlproxy.StmtInstanceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockDBInstanceInterfaceMockRecorder) Prepare(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockDBInstanceInterface)(nil).Prepare), query)
}

// Query mocks base method.
func (m *MockDBInstanceInterface) Query(query string, args ...any) (sqlproxy.RowsInstanceInterface, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(sqlproxy.RowsInstanceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDBInstanceInterfaceMockRecorder) Query(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDBInstanceInterface)(nil).Query), varargs...)
}
