// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/sql/stmtinstance.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/sql/stmtinstance.go -destination=../mock/app/proxy/sql/stmtinstance.go -package=mocksqlproxy
//

// Package mocksqlproxy is a generated GoMock package.
package mocksqlproxy

import (
	reflect "reflect"

	sqlproxy "github.com/yanosea/jrp/app/proxy/sql"
	gomock "go.uber.org/mock/gomock"
)

// MockStmtInstanceInterface is a mock of StmtInstanceInterface interface.
type MockStmtInstanceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStmtInstanceInterfaceMockRecorder
}

// MockStmtInstanceInterfaceMockRecorder is the mock recorder for MockStmtInstanceInterface.
type MockStmtInstanceInterfaceMockRecorder struct {
	mock *MockStmtInstanceInterface
}

// NewMockStmtInstanceInterface creates a new mock instance.
func NewMockStmtInstanceInterface(ctrl *gomock.Controller) *MockStmtInstanceInterface {
	mock := &MockStmtInstanceInterface{ctrl: ctrl}
	mock.recorder = &MockStmtInstanceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStmtInstanceInterface) EXPECT() *MockStmtInstanceInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStmtInstanceInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStmtInstanceInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStmtInstanceInterface)(nil).Close))
}

// Exec mocks base method.
func (m *MockStmtInstanceInterface) Exec(args ...any) (sqlproxy.ResultInstanceInterface, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sqlproxy.ResultInstanceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockStmtInstanceInterfaceMockRecorder) Exec(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockStmtInstanceInterface)(nil).Exec), args...)
}

// Query mocks base method.
func (m *MockStmtInstanceInterface) Query(args ...any) (sqlproxy.RowsInstanceInterface, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(sqlproxy.RowsInstanceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockStmtInstanceInterfaceMockRecorder) Query(args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStmtInstanceInterface)(nil).Query), args...)
}
