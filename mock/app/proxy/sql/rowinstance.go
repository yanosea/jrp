// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/sql/rowinstance.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/sql/rowinstance.go -destination=../mock/app/proxy/sql/rowinstance.go -package=mocksqlproxy
//

// Package mocksqlproxy is a generated GoMock package.
package mocksqlproxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRowInstanceInterface is a mock of RowInstanceInterface interface.
type MockRowInstanceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRowInstanceInterfaceMockRecorder
}

// MockRowInstanceInterfaceMockRecorder is the mock recorder for MockRowInstanceInterface.
type MockRowInstanceInterfaceMockRecorder struct {
	mock *MockRowInstanceInterface
}

// NewMockRowInstanceInterface creates a new mock instance.
func NewMockRowInstanceInterface(ctrl *gomock.Controller) *MockRowInstanceInterface {
	mock := &MockRowInstanceInterface{ctrl: ctrl}
	mock.recorder = &MockRowInstanceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRowInstanceInterface) EXPECT() *MockRowInstanceInterfaceMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockRowInstanceInterface) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockRowInstanceInterfaceMockRecorder) Scan(dest ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRowInstanceInterface)(nil).Scan), dest...)
}
