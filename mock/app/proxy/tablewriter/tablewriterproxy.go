// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/tablewriter/tablewriterproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/tablewriter/tablewriterproxy.go -destination=../mock/app/proxy/tablewriter/tablewriterproxy.go -package=mocktablewriterproxy
//

// Package mocktablewriterproxy is a generated GoMock package.
package mocktablewriterproxy

import (
	reflect "reflect"

	ioproxy "github.com/yanosea/jrp/app/proxy/io"
	tablewriterproxy "github.com/yanosea/jrp/app/proxy/tablewriter"
	gomock "go.uber.org/mock/gomock"
)

// MockTableWriter is a mock of TableWriter interface.
type MockTableWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTableWriterMockRecorder
}

// MockTableWriterMockRecorder is the mock recorder for MockTableWriter.
type MockTableWriterMockRecorder struct {
	mock *MockTableWriter
}

// NewMockTableWriter creates a new mock instance.
func NewMockTableWriter(ctrl *gomock.Controller) *MockTableWriter {
	mock := &MockTableWriter{ctrl: ctrl}
	mock.recorder = &MockTableWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableWriter) EXPECT() *MockTableWriterMockRecorder {
	return m.recorder
}

// NewTable mocks base method.
func (m *MockTableWriter) NewTable(writer ioproxy.WriterInstanceInterface) *tablewriterproxy.TableInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTable", writer)
	ret0, _ := ret[0].(*tablewriterproxy.TableInstance)
	return ret0
}

// NewTable indicates an expected call of NewTable.
func (mr *MockTableWriterMockRecorder) NewTable(writer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTable", reflect.TypeOf((*MockTableWriter)(nil).NewTable), writer)
}
