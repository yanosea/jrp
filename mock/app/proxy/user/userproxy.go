// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/user/userproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/user/userproxy.go -destination=../mock/app/proxy/user/userproxy.go -package=mockuserproxy
//

// Package mockuserproxy is a generated GoMock package.
package mockuserproxy

import (
	reflect "reflect"

	userproxy "github.com/yanosea/jrp/app/proxy/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Current mocks base method.
func (m *MockUser) Current() (*userproxy.UserInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(*userproxy.UserInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Current indicates an expected call of Current.
func (mr *MockUserMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockUser)(nil).Current))
}
