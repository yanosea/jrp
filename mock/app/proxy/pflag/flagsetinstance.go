// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/pflag/flagsetinstance.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/pflag/flagsetinstance.go -destination=../mock/app/proxy/pflag/flagsetinstance.go -package=mockpflagproxy
//

// Package mockpflagproxy is a generated GoMock package.
package mockpflagproxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFlagSetInstanceInterface is a mock of FlagSetInstanceInterface interface.
type MockFlagSetInstanceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFlagSetInstanceInterfaceMockRecorder
}

// MockFlagSetInstanceInterfaceMockRecorder is the mock recorder for MockFlagSetInstanceInterface.
type MockFlagSetInstanceInterfaceMockRecorder struct {
	mock *MockFlagSetInstanceInterface
}

// NewMockFlagSetInstanceInterface creates a new mock instance.
func NewMockFlagSetInstanceInterface(ctrl *gomock.Controller) *MockFlagSetInstanceInterface {
	mock := &MockFlagSetInstanceInterface{ctrl: ctrl}
	mock.recorder = &MockFlagSetInstanceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlagSetInstanceInterface) EXPECT() *MockFlagSetInstanceInterfaceMockRecorder {
	return m.recorder
}

// BoolVarP mocks base method.
func (m *MockFlagSetInstanceInterface) BoolVarP(p *bool, name, shorthand string, value bool, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BoolVarP", p, name, shorthand, value, usage)
}

// BoolVarP indicates an expected call of BoolVarP.
func (mr *MockFlagSetInstanceInterfaceMockRecorder) BoolVarP(p, name, shorthand, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BoolVarP", reflect.TypeOf((*MockFlagSetInstanceInterface)(nil).BoolVarP), p, name, shorthand, value, usage)
}

// IntVarP mocks base method.
func (m *MockFlagSetInstanceInterface) IntVarP(p *int, name, shorthand string, value int, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IntVarP", p, name, shorthand, value, usage)
}

// IntVarP indicates an expected call of IntVarP.
func (mr *MockFlagSetInstanceInterfaceMockRecorder) IntVarP(p, name, shorthand, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntVarP", reflect.TypeOf((*MockFlagSetInstanceInterface)(nil).IntVarP), p, name, shorthand, value, usage)
}

// Set mocks base method.
func (m *MockFlagSetInstanceInterface) Set(name, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", name, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockFlagSetInstanceInterfaceMockRecorder) Set(name, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockFlagSetInstanceInterface)(nil).Set), name, value)
}

// StringVarP mocks base method.
func (m *MockFlagSetInstanceInterface) StringVarP(p *string, name, shorthand, value, usage string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StringVarP", p, name, shorthand, value, usage)
}

// StringVarP indicates an expected call of StringVarP.
func (mr *MockFlagSetInstanceInterfaceMockRecorder) StringVarP(p, name, shorthand, value, usage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringVarP", reflect.TypeOf((*MockFlagSetInstanceInterface)(nil).StringVarP), p, name, shorthand, value, usage)
}
