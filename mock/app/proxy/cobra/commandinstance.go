// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/cobra/commandinstance.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/cobra/commandinstance.go -destination=../mock/app/proxy/cobra/commandinstance.go -package=mockcobraproxy
//

// Package mockcobraproxy is a generated GoMock package.
package mockcobraproxy

import (
	reflect "reflect"

	cobra "github.com/spf13/cobra"
	cobraproxy "github.com/yanosea/jrp/app/proxy/cobra"
	ioproxy "github.com/yanosea/jrp/app/proxy/io"
	pflagproxy "github.com/yanosea/jrp/app/proxy/pflag"
	gomock "go.uber.org/mock/gomock"
)

// MockCommandInstanceInterface is a mock of CommandInstanceInterface interface.
type MockCommandInstanceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommandInstanceInterfaceMockRecorder
}

// MockCommandInstanceInterfaceMockRecorder is the mock recorder for MockCommandInstanceInterface.
type MockCommandInstanceInterfaceMockRecorder struct {
	mock *MockCommandInstanceInterface
}

// NewMockCommandInstanceInterface creates a new mock instance.
func NewMockCommandInstanceInterface(ctrl *gomock.Controller) *MockCommandInstanceInterface {
	mock := &MockCommandInstanceInterface{ctrl: ctrl}
	mock.recorder = &MockCommandInstanceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandInstanceInterface) EXPECT() *MockCommandInstanceInterfaceMockRecorder {
	return m.recorder
}

// AddCommand mocks base method.
func (m *MockCommandInstanceInterface) AddCommand(cmds ...*cobraproxy.CommandInstance) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range cmds {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddCommand", varargs...)
}

// AddCommand indicates an expected call of AddCommand.
func (mr *MockCommandInstanceInterfaceMockRecorder) AddCommand(cmds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommand", reflect.TypeOf((*MockCommandInstanceInterface)(nil).AddCommand), cmds...)
}

// Execute mocks base method.
func (m *MockCommandInstanceInterface) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCommandInstanceInterfaceMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommandInstanceInterface)(nil).Execute))
}

// GetCommand mocks base method.
func (m *MockCommandInstanceInterface) GetCommand() *cobra.Command {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommand")
	ret0, _ := ret[0].(*cobra.Command)
	return ret0
}

// GetCommand indicates an expected call of GetCommand.
func (mr *MockCommandInstanceInterfaceMockRecorder) GetCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommand", reflect.TypeOf((*MockCommandInstanceInterface)(nil).GetCommand))
}

// PersistentFlags mocks base method.
func (m *MockCommandInstanceInterface) PersistentFlags() *pflagproxy.FlagSetInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentFlags")
	ret0, _ := ret[0].(*pflagproxy.FlagSetInstance)
	return ret0
}

// PersistentFlags indicates an expected call of PersistentFlags.
func (mr *MockCommandInstanceInterfaceMockRecorder) PersistentFlags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentFlags", reflect.TypeOf((*MockCommandInstanceInterface)(nil).PersistentFlags))
}

// RunE mocks base method.
func (m *MockCommandInstanceInterface) RunE(cmd *cobra.Command, args []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunE", cmd, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunE indicates an expected call of RunE.
func (mr *MockCommandInstanceInterfaceMockRecorder) RunE(cmd, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunE", reflect.TypeOf((*MockCommandInstanceInterface)(nil).RunE), cmd, args)
}

// SetArgs mocks base method.
func (m *MockCommandInstanceInterface) SetArgs(args []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetArgs", args)
}

// SetArgs indicates an expected call of SetArgs.
func (mr *MockCommandInstanceInterfaceMockRecorder) SetArgs(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetArgs", reflect.TypeOf((*MockCommandInstanceInterface)(nil).SetArgs), args)
}

// SetErr mocks base method.
func (m *MockCommandInstanceInterface) SetErr(io ioproxy.WriterInstanceInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetErr", io)
}

// SetErr indicates an expected call of SetErr.
func (mr *MockCommandInstanceInterfaceMockRecorder) SetErr(io any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetErr", reflect.TypeOf((*MockCommandInstanceInterface)(nil).SetErr), io)
}

// SetHelpTemplate mocks base method.
func (m *MockCommandInstanceInterface) SetHelpTemplate(s string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHelpTemplate", s)
}

// SetHelpTemplate indicates an expected call of SetHelpTemplate.
func (mr *MockCommandInstanceInterfaceMockRecorder) SetHelpTemplate(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHelpTemplate", reflect.TypeOf((*MockCommandInstanceInterface)(nil).SetHelpTemplate), s)
}

// SetOut mocks base method.
func (m *MockCommandInstanceInterface) SetOut(io ioproxy.WriterInstanceInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOut", io)
}

// SetOut indicates an expected call of SetOut.
func (mr *MockCommandInstanceInterfaceMockRecorder) SetOut(io any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOut", reflect.TypeOf((*MockCommandInstanceInterface)(nil).SetOut), io)
}
