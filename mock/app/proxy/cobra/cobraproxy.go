// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/cobra/cobraproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/cobra/cobraproxy.go -destination=../mock/app/proxy/cobra/cobraproxy.go -package=mockcobraproxy
//

// Package mockcobraproxy is a generated GoMock package.
package mockcobraproxy

import (
	reflect "reflect"

	cobraproxy "github.com/yanosea/jrp/app/proxy/cobra"
	gomock "go.uber.org/mock/gomock"
)

// MockCobra is a mock of Cobra interface.
type MockCobra struct {
	ctrl     *gomock.Controller
	recorder *MockCobraMockRecorder
}

// MockCobraMockRecorder is the mock recorder for MockCobra.
type MockCobraMockRecorder struct {
	mock *MockCobra
}

// NewMockCobra creates a new mock instance.
func NewMockCobra(ctrl *gomock.Controller) *MockCobra {
	mock := &MockCobra{ctrl: ctrl}
	mock.recorder = &MockCobraMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCobra) EXPECT() *MockCobraMockRecorder {
	return m.recorder
}

// MaximumNArgs mocks base method.
func (m *MockCobra) MaximumNArgs(arg0 int) *cobraproxy.PositionalArgsInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MaximumNArgs", arg0)
	ret0, _ := ret[0].(*cobraproxy.PositionalArgsInstance)
	return ret0
}

// MaximumNArgs indicates an expected call of MaximumNArgs.
func (mr *MockCobraMockRecorder) MaximumNArgs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaximumNArgs", reflect.TypeOf((*MockCobra)(nil).MaximumNArgs), arg0)
}

// NewCommand mocks base method.
func (m *MockCobra) NewCommand() *cobraproxy.CommandInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCommand")
	ret0, _ := ret[0].(*cobraproxy.CommandInstance)
	return ret0
}

// NewCommand indicates an expected call of NewCommand.
func (mr *MockCobraMockRecorder) NewCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCommand", reflect.TypeOf((*MockCobra)(nil).NewCommand))
}
