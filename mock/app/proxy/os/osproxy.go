// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/os/osproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/os/osproxy.go -destination=../mock/app/proxy/os/osproxy.go -package=mockosproxy
//

// Package mockosproxy is a generated GoMock package.
package mockosproxy

import (
	reflect "reflect"

	fsproxy "github.com/yanosea/jrp/app/proxy/fs"
	osproxy "github.com/yanosea/jrp/app/proxy/os"
	gomock "go.uber.org/mock/gomock"
)

// MockOs is a mock of Os interface.
type MockOs struct {
	ctrl     *gomock.Controller
	recorder *MockOsMockRecorder
}

// MockOsMockRecorder is the mock recorder for MockOs.
type MockOsMockRecorder struct {
	mock *MockOs
}

// NewMockOs creates a new mock instance.
func NewMockOs(ctrl *gomock.Controller) *MockOs {
	mock := &MockOs{ctrl: ctrl}
	mock.recorder = &MockOsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOs) EXPECT() *MockOsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOs) Create(name string) (osproxy.FileInstanceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(osproxy.FileInstanceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOsMockRecorder) Create(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOs)(nil).Create), name)
}

// FileMode mocks base method.
func (m *MockOs) FileMode(perm fsproxy.FileMode) fsproxy.FileMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileMode", perm)
	ret0, _ := ret[0].(fsproxy.FileMode)
	return ret0
}

// FileMode indicates an expected call of FileMode.
func (mr *MockOsMockRecorder) FileMode(perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileMode", reflect.TypeOf((*MockOs)(nil).FileMode), perm)
}

// Getenv mocks base method.
func (m *MockOs) Getenv(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getenv", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Getenv indicates an expected call of Getenv.
func (mr *MockOsMockRecorder) Getenv(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getenv", reflect.TypeOf((*MockOs)(nil).Getenv), key)
}

// IsNotExist mocks base method.
func (m *MockOs) IsNotExist(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotExist", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotExist indicates an expected call of IsNotExist.
func (mr *MockOsMockRecorder) IsNotExist(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotExist", reflect.TypeOf((*MockOs)(nil).IsNotExist), err)
}

// MkdirAll mocks base method.
func (m *MockOs) MkdirAll(path string, perm fsproxy.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockOsMockRecorder) MkdirAll(path, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockOs)(nil).MkdirAll), path, perm)
}

// Open mocks base method.
func (m *MockOs) Open(name string) (*osproxy.FileInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(*osproxy.FileInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockOsMockRecorder) Open(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockOs)(nil).Open), name)
}

// Pipe mocks base method.
func (m *MockOs) Pipe() (*osproxy.FileInstance, *osproxy.FileInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipe")
	ret0, _ := ret[0].(*osproxy.FileInstance)
	ret1, _ := ret[1].(*osproxy.FileInstance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Pipe indicates an expected call of Pipe.
func (mr *MockOsMockRecorder) Pipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipe", reflect.TypeOf((*MockOs)(nil).Pipe))
}

// Remove mocks base method.
func (m *MockOs) Remove(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockOsMockRecorder) Remove(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockOs)(nil).Remove), name)
}

// RemoveAll mocks base method.
func (m *MockOs) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockOsMockRecorder) RemoveAll(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockOs)(nil).RemoveAll), path)
}

// Stat mocks base method.
func (m *MockOs) Stat(name string) (*fsproxy.FileInfoInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(*fsproxy.FileInfoInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockOsMockRecorder) Stat(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockOs)(nil).Stat), name)
}

// TempDir mocks base method.
func (m *MockOs) TempDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TempDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// TempDir indicates an expected call of TempDir.
func (mr *MockOsMockRecorder) TempDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TempDir", reflect.TypeOf((*MockOs)(nil).TempDir))
}
