// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/promptui/promptinstance.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/promptui/promptinstance.go -destination=../mock/app/proxy/promptui/promptinstance.go -package=mockpromptuiproxy
//

// Package mockpromptuiproxy is a generated GoMock package.
package mockpromptuiproxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPromptInstanceInterface is a mock of PromptInstanceInterface interface.
type MockPromptInstanceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPromptInstanceInterfaceMockRecorder
}

// MockPromptInstanceInterfaceMockRecorder is the mock recorder for MockPromptInstanceInterface.
type MockPromptInstanceInterfaceMockRecorder struct {
	mock *MockPromptInstanceInterface
}

// NewMockPromptInstanceInterface creates a new mock instance.
func NewMockPromptInstanceInterface(ctrl *gomock.Controller) *MockPromptInstanceInterface {
	mock := &MockPromptInstanceInterface{ctrl: ctrl}
	mock.recorder = &MockPromptInstanceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromptInstanceInterface) EXPECT() *MockPromptInstanceInterfaceMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockPromptInstanceInterface) Run() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockPromptInstanceInterfaceMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPromptInstanceInterface)(nil).Run))
}

// SetLabel mocks base method.
func (m *MockPromptInstanceInterface) SetLabel(label string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLabel", label)
}

// SetLabel indicates an expected call of SetLabel.
func (mr *MockPromptInstanceInterfaceMockRecorder) SetLabel(label any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLabel", reflect.TypeOf((*MockPromptInstanceInterface)(nil).SetLabel), label)
}
