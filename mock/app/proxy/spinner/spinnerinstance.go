// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/spinner/spinnerinstance.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/spinner/spinnerinstance.go -destination=../mock/app/proxy/spinner/spinnerinstance.go -package=mockspinnerproxy
//

// Package mockspinnerproxy is a generated GoMock package.
package mockspinnerproxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSpinnerInstanceInterface is a mock of SpinnerInstanceInterface interface.
type MockSpinnerInstanceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSpinnerInstanceInterfaceMockRecorder
}

// MockSpinnerInstanceInterfaceMockRecorder is the mock recorder for MockSpinnerInstanceInterface.
type MockSpinnerInstanceInterfaceMockRecorder struct {
	mock *MockSpinnerInstanceInterface
}

// NewMockSpinnerInstanceInterface creates a new mock instance.
func NewMockSpinnerInstanceInterface(ctrl *gomock.Controller) *MockSpinnerInstanceInterface {
	mock := &MockSpinnerInstanceInterface{ctrl: ctrl}
	mock.recorder = &MockSpinnerInstanceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpinnerInstanceInterface) EXPECT() *MockSpinnerInstanceInterfaceMockRecorder {
	return m.recorder
}

// Reverse mocks base method.
func (m *MockSpinnerInstanceInterface) Reverse() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reverse")
}

// Reverse indicates an expected call of Reverse.
func (mr *MockSpinnerInstanceInterfaceMockRecorder) Reverse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reverse", reflect.TypeOf((*MockSpinnerInstanceInterface)(nil).Reverse))
}

// SetColor mocks base method.
func (m *MockSpinnerInstanceInterface) SetColor(colors ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range colors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetColor", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetColor indicates an expected call of SetColor.
func (mr *MockSpinnerInstanceInterfaceMockRecorder) SetColor(colors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetColor", reflect.TypeOf((*MockSpinnerInstanceInterface)(nil).SetColor), colors...)
}

// SetSuffix mocks base method.
func (m *MockSpinnerInstanceInterface) SetSuffix(suffix string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSuffix", suffix)
}

// SetSuffix indicates an expected call of SetSuffix.
func (mr *MockSpinnerInstanceInterfaceMockRecorder) SetSuffix(suffix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSuffix", reflect.TypeOf((*MockSpinnerInstanceInterface)(nil).SetSuffix), suffix)
}

// Start mocks base method.
func (m *MockSpinnerInstanceInterface) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockSpinnerInstanceInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSpinnerInstanceInterface)(nil).Start))
}

// Stop mocks base method.
func (m *MockSpinnerInstanceInterface) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSpinnerInstanceInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSpinnerInstanceInterface)(nil).Stop))
}
