// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/gzip/gzipproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/gzip/gzipproxy.go -destination=../mock/app/proxy/gzip/gzipproxy.go -package=mockgzipproxy
//

// Package mockgzipproxy is a generated GoMock package.
package mockgzipproxy

import (
	reflect "reflect"

	gzipproxy "github.com/yanosea/jrp/app/proxy/gzip"
	ioproxy "github.com/yanosea/jrp/app/proxy/io"
	gomock "go.uber.org/mock/gomock"
)

// MockGzip is a mock of Gzip interface.
type MockGzip struct {
	ctrl     *gomock.Controller
	recorder *MockGzipMockRecorder
}

// MockGzipMockRecorder is the mock recorder for MockGzip.
type MockGzipMockRecorder struct {
	mock *MockGzip
}

// NewMockGzip creates a new mock instance.
func NewMockGzip(ctrl *gomock.Controller) *MockGzip {
	mock := &MockGzip{ctrl: ctrl}
	mock.recorder = &MockGzipMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGzip) EXPECT() *MockGzipMockRecorder {
	return m.recorder
}

// NewReader mocks base method.
func (m *MockGzip) NewReader(r ioproxy.ReaderInstanceInterface) (gzipproxy.ReaderInstanceInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", r)
	ret0, _ := ret[0].(gzipproxy.ReaderInstanceInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader.
func (mr *MockGzipMockRecorder) NewReader(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockGzip)(nil).NewReader), r)
}
