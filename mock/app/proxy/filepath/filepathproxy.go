// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/filepath/filepathproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/filepath/filepathproxy.go -destination=../mock/app/proxy/filepath/filepathproxy.go -package=mockfilepathproxy
//

// Package mockfilepathproxy is a generated GoMock package.
package mockfilepathproxy

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFilePath is a mock of FilePath interface.
type MockFilePath struct {
	ctrl     *gomock.Controller
	recorder *MockFilePathMockRecorder
}

// MockFilePathMockRecorder is the mock recorder for MockFilePath.
type MockFilePathMockRecorder struct {
	mock *MockFilePath
}

// NewMockFilePath creates a new mock instance.
func NewMockFilePath(ctrl *gomock.Controller) *MockFilePath {
	mock := &MockFilePath{ctrl: ctrl}
	mock.recorder = &MockFilePathMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilePath) EXPECT() *MockFilePathMockRecorder {
	return m.recorder
}

// Join mocks base method.
func (m *MockFilePath) Join(elem ...string) string {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range elem {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockFilePathMockRecorder) Join(elem ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockFilePath)(nil).Join), elem...)
}
