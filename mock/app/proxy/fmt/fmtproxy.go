// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/fmt/fmtproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/fmt/fmtproxy.go -destination=../mock/app/proxy/fmt/fmtproxy.go -package=mockfmtproxy
//

// Package mockfmtproxy is a generated GoMock package.
package mockfmtproxy

import (
	reflect "reflect"

	ioproxy "github.com/yanosea/jrp/app/proxy/io"
	gomock "go.uber.org/mock/gomock"
)

// MockFmt is a mock of Fmt interface.
type MockFmt struct {
	ctrl     *gomock.Controller
	recorder *MockFmtMockRecorder
}

// MockFmtMockRecorder is the mock recorder for MockFmt.
type MockFmtMockRecorder struct {
	mock *MockFmt
}

// NewMockFmt creates a new mock instance.
func NewMockFmt(ctrl *gomock.Controller) *MockFmt {
	mock := &MockFmt{ctrl: ctrl}
	mock.recorder = &MockFmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFmt) EXPECT() *MockFmtMockRecorder {
	return m.recorder
}

// Fprintf mocks base method.
func (m *MockFmt) Fprintf(w ioproxy.WriterInstanceInterface, format string, a ...any) {
	m.ctrl.T.Helper()
	varargs := []any{w, format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	m.ctrl.Call(m, "Fprintf", varargs...)
}

// Fprintf indicates an expected call of Fprintf.
func (mr *MockFmtMockRecorder) Fprintf(w, format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{w, format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fprintf", reflect.TypeOf((*MockFmt)(nil).Fprintf), varargs...)
}

// Sprintf mocks base method.
func (m *MockFmt) Sprintf(format string, a ...any) string {
	m.ctrl.T.Helper()
	varargs := []any{format}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Sprintf", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// Sprintf indicates an expected call of Sprintf.
func (mr *MockFmtMockRecorder) Sprintf(format any, a ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{format}, a...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sprintf", reflect.TypeOf((*MockFmt)(nil).Sprintf), varargs...)
}
