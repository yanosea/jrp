// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/time/timeproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/time/timeproxy.go -destination=../mock/app/proxy/time/timeproxy.go -package=mocktimeproxy
//

// Package mocktimeproxy is a generated GoMock package.
package mocktimeproxy

import (
	reflect "reflect"
	time "time"

	timeproxy "github.com/yanosea/jrp/app/proxy/time"
	gomock "go.uber.org/mock/gomock"
)

// MockTime is a mock of Time interface.
type MockTime struct {
	ctrl     *gomock.Controller
	recorder *MockTimeMockRecorder
}

// MockTimeMockRecorder is the mock recorder for MockTime.
type MockTimeMockRecorder struct {
	mock *MockTime
}

// NewMockTime creates a new mock instance.
func NewMockTime(ctrl *gomock.Controller) *MockTime {
	mock := &MockTime{ctrl: ctrl}
	mock.recorder = &MockTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTime) EXPECT() *MockTimeMockRecorder {
	return m.recorder
}

// Date mocks base method.
func (m *MockTime) Date(year int, month time.Month, day, hour, min, sec, nsec int, loc *time.Location) *timeproxy.TimeInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Date", year, month, day, hour, min, sec, nsec, loc)
	ret0, _ := ret[0].(*timeproxy.TimeInstance)
	return ret0
}

// Date indicates an expected call of Date.
func (mr *MockTimeMockRecorder) Date(year, month, day, hour, min, sec, nsec, loc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Date", reflect.TypeOf((*MockTime)(nil).Date), year, month, day, hour, min, sec, nsec, loc)
}

// Now mocks base method.
func (m *MockTime) Now() *timeproxy.TimeInstance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(*timeproxy.TimeInstance)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTime)(nil).Now))
}
