// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/proxy/debug/debugproxy.go
//
// Generated by this command:
//
//	mockgen -source=../app/proxy/debug/debugproxy.go -destination=../mock/app/proxy/debug/debugproxy.go -package=mockdebugproxy
//

// Package mockdebugproxy is a generated GoMock package.
package mockdebugproxy

import (
	reflect "reflect"

	debugproxy "github.com/yanosea/jrp/app/proxy/debug"
	gomock "go.uber.org/mock/gomock"
)

// MockDebug is a mock of Debug interface.
type MockDebug struct {
	ctrl     *gomock.Controller
	recorder *MockDebugMockRecorder
}

// MockDebugMockRecorder is the mock recorder for MockDebug.
type MockDebugMockRecorder struct {
	mock *MockDebug
}

// NewMockDebug creates a new mock instance.
func NewMockDebug(ctrl *gomock.Controller) *MockDebug {
	mock := &MockDebug{ctrl: ctrl}
	mock.recorder = &MockDebugMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDebug) EXPECT() *MockDebugMockRecorder {
	return m.recorder
}

// ReadBuildInfo mocks base method.
func (m *MockDebug) ReadBuildInfo() (*debugproxy.BuildInfoInstance, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBuildInfo")
	ret0, _ := ret[0].(*debugproxy.BuildInfoInstance)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// ReadBuildInfo indicates an expected call of ReadBuildInfo.
func (mr *MockDebugMockRecorder) ReadBuildInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBuildInfo", reflect.TypeOf((*MockDebug)(nil).ReadBuildInfo))
}
