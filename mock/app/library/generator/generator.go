// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/library/generator/generator.go
//
// Generated by this command:
//
//	mockgen -source=../app/library/generator/generator.go -destination=../mock/app/library/generator/generator.go -package=mockgenerator
//

// Package mockgenerator is a generated GoMock package.
package mockgenerator

import (
	reflect "reflect"

	model "github.com/yanosea/jrp/app/database/jrp/model"
	generator "github.com/yanosea/jrp/app/library/generator"
	gomock "go.uber.org/mock/gomock"
)

// MockGeneratable is a mock of Generatable interface.
type MockGeneratable struct {
	ctrl     *gomock.Controller
	recorder *MockGeneratableMockRecorder
}

// MockGeneratableMockRecorder is the mock recorder for MockGeneratable.
type MockGeneratableMockRecorder struct {
	mock *MockGeneratable
}

// NewMockGeneratable creates a new mock instance.
func NewMockGeneratable(ctrl *gomock.Controller) *MockGeneratable {
	mock := &MockGeneratable{ctrl: ctrl}
	mock.recorder = &MockGeneratableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeneratable) EXPECT() *MockGeneratableMockRecorder {
	return m.recorder
}

// GenerateJrp mocks base method.
func (m *MockGeneratable) GenerateJrp(wnJpnDBFilePath string, num int, word string, mode generator.GenerateMode) (generator.GenerateResult, []*model.Jrp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJrp", wnJpnDBFilePath, num, word, mode)
	ret0, _ := ret[0].(generator.GenerateResult)
	ret1, _ := ret[1].([]*model.Jrp)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateJrp indicates an expected call of GenerateJrp.
func (mr *MockGeneratableMockRecorder) GenerateJrp(wnJpnDBFilePath, num, word, mode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJrp", reflect.TypeOf((*MockGeneratable)(nil).GenerateJrp), wnJpnDBFilePath, num, word, mode)
}
