// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/library/downloader/downloader.go
//
// Generated by this command:
//
//	mockgen -source=../app/library/downloader/downloader.go -destination=../mock/app/library/downloader/downloader.go -package=mockdownloader
//

// Package mockdownloader is a generated GoMock package.
package mockdownloader

import (
	reflect "reflect"

	downloader "github.com/yanosea/jrp/app/library/downloader"
	gomock "go.uber.org/mock/gomock"
)

// MockDownloadable is a mock of Downloadable interface.
type MockDownloadable struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadableMockRecorder
}

// MockDownloadableMockRecorder is the mock recorder for MockDownloadable.
type MockDownloadableMockRecorder struct {
	mock *MockDownloadable
}

// NewMockDownloadable creates a new mock instance.
func NewMockDownloadable(ctrl *gomock.Controller) *MockDownloadable {
	mock := &MockDownloadable{ctrl: ctrl}
	mock.recorder = &MockDownloadableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadable) EXPECT() *MockDownloadableMockRecorder {
	return m.recorder
}

// DownloadWNJpnDBFile mocks base method.
func (m *MockDownloadable) DownloadWNJpnDBFile(wnJpnDBFileDirPath string) (downloader.DownloadStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadWNJpnDBFile", wnJpnDBFileDirPath)
	ret0, _ := ret[0].(downloader.DownloadStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadWNJpnDBFile indicates an expected call of DownloadWNJpnDBFile.
func (mr *MockDownloadableMockRecorder) DownloadWNJpnDBFile(wnJpnDBFileDirPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadWNJpnDBFile", reflect.TypeOf((*MockDownloadable)(nil).DownloadWNJpnDBFile), wnJpnDBFileDirPath)
}
