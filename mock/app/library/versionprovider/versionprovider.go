// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/library/versionprovider/versionprovider.go
//
// Generated by this command:
//
//	mockgen -source=../app/library/versionprovider/versionprovider.go -destination=../mock/app/library/versionprovider/versionprovider.go -package=mockversionprovider
//

// Package mockversionprovider is a generated GoMock package.
package mockversionprovider

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockVersionProvidable is a mock of VersionProvidable interface.
type MockVersionProvidable struct {
	ctrl     *gomock.Controller
	recorder *MockVersionProvidableMockRecorder
}

// MockVersionProvidableMockRecorder is the mock recorder for MockVersionProvidable.
type MockVersionProvidableMockRecorder struct {
	mock *MockVersionProvidable
}

// NewMockVersionProvidable creates a new mock instance.
func NewMockVersionProvidable(ctrl *gomock.Controller) *MockVersionProvidable {
	mock := &MockVersionProvidable{ctrl: ctrl}
	mock.recorder = &MockVersionProvidableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionProvidable) EXPECT() *MockVersionProvidableMockRecorder {
	return m.recorder
}

// GetVersion mocks base method.
func (m *MockVersionProvidable) GetVersion(emmbeddedVersion string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion", emmbeddedVersion)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockVersionProvidableMockRecorder) GetVersion(emmbeddedVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockVersionProvidable)(nil).GetVersion), emmbeddedVersion)
}
