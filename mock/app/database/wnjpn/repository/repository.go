// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/database/wnjpn/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=../app/database/wnjpn/repository/repository.go -destination=../mock/app/database/wnjpn/repository/repository.go -package=mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	reflect "reflect"

	model "github.com/yanosea/jrp/app/database/wnjpn/model"
	gomock "go.uber.org/mock/gomock"
)

// MockWNJpnRepositoryInterface is a mock of WNJpnRepositoryInterface interface.
type MockWNJpnRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWNJpnRepositoryInterfaceMockRecorder
}

// MockWNJpnRepositoryInterfaceMockRecorder is the mock recorder for MockWNJpnRepositoryInterface.
type MockWNJpnRepositoryInterfaceMockRecorder struct {
	mock *MockWNJpnRepositoryInterface
}

// NewMockWNJpnRepositoryInterface creates a new mock instance.
func NewMockWNJpnRepositoryInterface(ctrl *gomock.Controller) *MockWNJpnRepositoryInterface {
	mock := &MockWNJpnRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockWNJpnRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWNJpnRepositoryInterface) EXPECT() *MockWNJpnRepositoryInterfaceMockRecorder {
	return m.recorder
}

// GetAllAVNWords mocks base method.
func (m *MockWNJpnRepositoryInterface) GetAllAVNWords(wnJpnDBFilePath string) ([]model.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAVNWords", wnJpnDBFilePath)
	ret0, _ := ret[0].([]model.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAVNWords indicates an expected call of GetAllAVNWords.
func (mr *MockWNJpnRepositoryInterfaceMockRecorder) GetAllAVNWords(wnJpnDBFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAVNWords", reflect.TypeOf((*MockWNJpnRepositoryInterface)(nil).GetAllAVNWords), wnJpnDBFilePath)
}

// GetAllAVWords mocks base method.
func (m *MockWNJpnRepositoryInterface) GetAllAVWords(wnJpnDBFilePath string) ([]model.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAVWords", wnJpnDBFilePath)
	ret0, _ := ret[0].([]model.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAVWords indicates an expected call of GetAllAVWords.
func (mr *MockWNJpnRepositoryInterfaceMockRecorder) GetAllAVWords(wnJpnDBFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAVWords", reflect.TypeOf((*MockWNJpnRepositoryInterface)(nil).GetAllAVWords), wnJpnDBFilePath)
}

// GetAllNWords mocks base method.
func (m *MockWNJpnRepositoryInterface) GetAllNWords(wnJpnDBFilePath string) ([]model.Word, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNWords", wnJpnDBFilePath)
	ret0, _ := ret[0].([]model.Word)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNWords indicates an expected call of GetAllNWords.
func (mr *MockWNJpnRepositoryInterfaceMockRecorder) GetAllNWords(wnJpnDBFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNWords", reflect.TypeOf((*MockWNJpnRepositoryInterface)(nil).GetAllNWords), wnJpnDBFilePath)
}
