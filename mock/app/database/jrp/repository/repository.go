// Code generated by MockGen. DO NOT EDIT.
// Source: ../app/database/jrp/repository/repository.go
//
// Generated by this command:
//
//	mockgen -source=../app/database/jrp/repository/repository.go -destination=../mock/app/database/jrp/repository/repository.go -package=mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	reflect "reflect"

	model "github.com/yanosea/jrp/app/database/jrp/model"
	repository "github.com/yanosea/jrp/app/database/jrp/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockJrpRepositoryInterface is a mock of JrpRepositoryInterface interface.
type MockJrpRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockJrpRepositoryInterfaceMockRecorder
}

// MockJrpRepositoryInterfaceMockRecorder is the mock recorder for MockJrpRepositoryInterface.
type MockJrpRepositoryInterfaceMockRecorder struct {
	mock *MockJrpRepositoryInterface
}

// NewMockJrpRepositoryInterface creates a new mock instance.
func NewMockJrpRepositoryInterface(ctrl *gomock.Controller) *MockJrpRepositoryInterface {
	mock := &MockJrpRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockJrpRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJrpRepositoryInterface) EXPECT() *MockJrpRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddFavoriteByIDs mocks base method.
func (m *MockJrpRepositoryInterface) AddFavoriteByIDs(jrpDBFilePath string, ids []int) (repository.AddStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavoriteByIDs", jrpDBFilePath, ids)
	ret0, _ := ret[0].(repository.AddStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFavoriteByIDs indicates an expected call of AddFavoriteByIDs.
func (mr *MockJrpRepositoryInterfaceMockRecorder) AddFavoriteByIDs(jrpDBFilePath, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavoriteByIDs", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).AddFavoriteByIDs), jrpDBFilePath, ids)
}

// GetAllFavorite mocks base method.
func (m *MockJrpRepositoryInterface) GetAllFavorite(jrpDBFilePath string) ([]*model.Jrp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFavorite", jrpDBFilePath)
	ret0, _ := ret[0].([]*model.Jrp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFavorite indicates an expected call of GetAllFavorite.
func (mr *MockJrpRepositoryInterfaceMockRecorder) GetAllFavorite(jrpDBFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFavorite", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).GetAllFavorite), jrpDBFilePath)
}

// GetAllHistory mocks base method.
func (m *MockJrpRepositoryInterface) GetAllHistory(jrpDBFilePath string) ([]*model.Jrp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllHistory", jrpDBFilePath)
	ret0, _ := ret[0].([]*model.Jrp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllHistory indicates an expected call of GetAllHistory.
func (mr *MockJrpRepositoryInterfaceMockRecorder) GetAllHistory(jrpDBFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllHistory", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).GetAllHistory), jrpDBFilePath)
}

// GetFavoriteWithNumber mocks base method.
func (m *MockJrpRepositoryInterface) GetFavoriteWithNumber(jrpDBFilePath string, number int) ([]*model.Jrp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteWithNumber", jrpDBFilePath, number)
	ret0, _ := ret[0].([]*model.Jrp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteWithNumber indicates an expected call of GetFavoriteWithNumber.
func (mr *MockJrpRepositoryInterfaceMockRecorder) GetFavoriteWithNumber(jrpDBFilePath, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteWithNumber", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).GetFavoriteWithNumber), jrpDBFilePath, number)
}

// GetHistoryWithNumber mocks base method.
func (m *MockJrpRepositoryInterface) GetHistoryWithNumber(jrpDBFilePath string, number int) ([]*model.Jrp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryWithNumber", jrpDBFilePath, number)
	ret0, _ := ret[0].([]*model.Jrp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryWithNumber indicates an expected call of GetHistoryWithNumber.
func (mr *MockJrpRepositoryInterfaceMockRecorder) GetHistoryWithNumber(jrpDBFilePath, number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryWithNumber", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).GetHistoryWithNumber), jrpDBFilePath, number)
}

// RemoveFavoriteAll mocks base method.
func (m *MockJrpRepositoryInterface) RemoveFavoriteAll(jrpDBFilePath string) (repository.RemoveStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFavoriteAll", jrpDBFilePath)
	ret0, _ := ret[0].(repository.RemoveStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFavoriteAll indicates an expected call of RemoveFavoriteAll.
func (mr *MockJrpRepositoryInterfaceMockRecorder) RemoveFavoriteAll(jrpDBFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavoriteAll", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).RemoveFavoriteAll), jrpDBFilePath)
}

// RemoveFavoriteByIDs mocks base method.
func (m *MockJrpRepositoryInterface) RemoveFavoriteByIDs(jrpDBFilePath string, ids []int) (repository.RemoveStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFavoriteByIDs", jrpDBFilePath, ids)
	ret0, _ := ret[0].(repository.RemoveStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveFavoriteByIDs indicates an expected call of RemoveFavoriteByIDs.
func (mr *MockJrpRepositoryInterfaceMockRecorder) RemoveFavoriteByIDs(jrpDBFilePath, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFavoriteByIDs", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).RemoveFavoriteByIDs), jrpDBFilePath, ids)
}

// RemoveHistoryAll mocks base method.
func (m *MockJrpRepositoryInterface) RemoveHistoryAll(jrpDBFilePath string, force bool) (repository.RemoveStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHistoryAll", jrpDBFilePath, force)
	ret0, _ := ret[0].(repository.RemoveStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHistoryAll indicates an expected call of RemoveHistoryAll.
func (mr *MockJrpRepositoryInterfaceMockRecorder) RemoveHistoryAll(jrpDBFilePath, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHistoryAll", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).RemoveHistoryAll), jrpDBFilePath, force)
}

// RemoveHistoryByIDs mocks base method.
func (m *MockJrpRepositoryInterface) RemoveHistoryByIDs(jrpDBFilePath string, ids []int, force bool) (repository.RemoveStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHistoryByIDs", jrpDBFilePath, ids, force)
	ret0, _ := ret[0].(repository.RemoveStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveHistoryByIDs indicates an expected call of RemoveHistoryByIDs.
func (mr *MockJrpRepositoryInterfaceMockRecorder) RemoveHistoryByIDs(jrpDBFilePath, ids, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHistoryByIDs", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).RemoveHistoryByIDs), jrpDBFilePath, ids, force)
}

// SaveHistory mocks base method.
func (m *MockJrpRepositoryInterface) SaveHistory(jrpDBFilePath string, jrps []*model.Jrp) (repository.SaveStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHistory", jrpDBFilePath, jrps)
	ret0, _ := ret[0].(repository.SaveStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveHistory indicates an expected call of SaveHistory.
func (mr *MockJrpRepositoryInterfaceMockRecorder) SaveHistory(jrpDBFilePath, jrps any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHistory", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).SaveHistory), jrpDBFilePath, jrps)
}

// SearchAllFavorite mocks base method.
func (m *MockJrpRepositoryInterface) SearchAllFavorite(jrpDBFilePath string, keywords []string, and bool) ([]*model.Jrp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllFavorite", jrpDBFilePath, keywords, and)
	ret0, _ := ret[0].([]*model.Jrp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAllFavorite indicates an expected call of SearchAllFavorite.
func (mr *MockJrpRepositoryInterfaceMockRecorder) SearchAllFavorite(jrpDBFilePath, keywords, and any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllFavorite", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).SearchAllFavorite), jrpDBFilePath, keywords, and)
}

// SearchAllHistory mocks base method.
func (m *MockJrpRepositoryInterface) SearchAllHistory(jrpDBFilePath string, keywords []string, and bool) ([]*model.Jrp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllHistory", jrpDBFilePath, keywords, and)
	ret0, _ := ret[0].([]*model.Jrp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAllHistory indicates an expected call of SearchAllHistory.
func (mr *MockJrpRepositoryInterfaceMockRecorder) SearchAllHistory(jrpDBFilePath, keywords, and any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllHistory", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).SearchAllHistory), jrpDBFilePath, keywords, and)
}

// SearchFavoriteWithNumber mocks base method.
func (m *MockJrpRepositoryInterface) SearchFavoriteWithNumber(jrpDBFilePath string, number int, keywords []string, and bool) ([]*model.Jrp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFavoriteWithNumber", jrpDBFilePath, number, keywords, and)
	ret0, _ := ret[0].([]*model.Jrp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchFavoriteWithNumber indicates an expected call of SearchFavoriteWithNumber.
func (mr *MockJrpRepositoryInterfaceMockRecorder) SearchFavoriteWithNumber(jrpDBFilePath, number, keywords, and any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFavoriteWithNumber", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).SearchFavoriteWithNumber), jrpDBFilePath, number, keywords, and)
}

// SearchHistoryWithNumber mocks base method.
func (m *MockJrpRepositoryInterface) SearchHistoryWithNumber(jrpDBFilePath string, number int, keywords []string, and bool) ([]*model.Jrp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchHistoryWithNumber", jrpDBFilePath, number, keywords, and)
	ret0, _ := ret[0].([]*model.Jrp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchHistoryWithNumber indicates an expected call of SearchHistoryWithNumber.
func (mr *MockJrpRepositoryInterfaceMockRecorder) SearchHistoryWithNumber(jrpDBFilePath, number, keywords, and any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchHistoryWithNumber", reflect.TypeOf((*MockJrpRepositoryInterface)(nil).SearchHistoryWithNumber), jrpDBFilePath, number, keywords, and)
}
