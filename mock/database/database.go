// Code generated by MockGen. DO NOT EDIT.
// Source: internal/database/database.go
//
// Generated by this command:
//
//	mockgen -source=internal/database/database.go -destination=mock/database/database.go -package=mock_database
//

// Package mock_database is a generated GoMock package.
package mock_database

import (
	sql "database/sql"
	reflect "reflect"

	database "github.com/yanosea/jrp/internal/database"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseProvider is a mock of DatabaseProvider interface.
type MockDatabaseProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseProviderMockRecorder
}

// MockDatabaseProviderMockRecorder is the mock recorder for MockDatabaseProvider.
type MockDatabaseProviderMockRecorder struct {
	mock *MockDatabaseProvider
}

// NewMockDatabaseProvider creates a new mock instance.
func NewMockDatabaseProvider(ctrl *gomock.Controller) *MockDatabaseProvider {
	mock := &MockDatabaseProvider{ctrl: ctrl}
	mock.recorder = &MockDatabaseProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseProvider) EXPECT() *MockDatabaseProviderMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockDatabaseProvider) Connect(dbFilePath string) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", dbFilePath)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockDatabaseProviderMockRecorder) Connect(dbFilePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDatabaseProvider)(nil).Connect), dbFilePath)
}

// Query mocks base method.
func (m *MockDatabaseProvider) Query(db *sql.DB, query string) (database.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", db, query)
	ret0, _ := ret[0].(database.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockDatabaseProviderMockRecorder) Query(db, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDatabaseProvider)(nil).Query), db, query)
}
